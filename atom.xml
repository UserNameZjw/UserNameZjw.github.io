<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://UserNameZjw.github.io</id>
    <title>「谨言慎行」</title>
    <updated>2019-10-26T14:16:32.793Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://UserNameZjw.github.io"/>
    <link rel="self" href="https://UserNameZjw.github.io/atom.xml"/>
    <subtitle>一位年近三十的中年油腻肥胖老男人的中年危机</subtitle>
    <logo>https://UserNameZjw.github.io/images/avatar.png</logo>
    <icon>https://UserNameZjw.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 「谨言慎行」</rights>
    <entry>
        <title type="html"><![CDATA[「Mac」升级 macOS Catalina 后，Alfred 出现的双目录以及无法搜索系统自带软件问题]]></title>
        <id>https://UserNameZjw.github.io/post/mac-Alfred</id>
        <link href="https://UserNameZjw.github.io/post/mac-Alfred">
        </link>
        <updated>2019-10-26T11:23:14.000Z</updated>
        <summary type="html"><![CDATA[<p>解决 Alfred<br>
出现的双目录<br>
无法搜索系统自带软件问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>解决 Alfred<br>
出现的双目录<br>
无法搜索系统自带软件问题</p>
<!-- more -->
<h4 id="问题一">问题一</h4>
<p>升级之后，Alfred 搜索软件出现双目录 如下 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1572089394351.png" alt=""><br>
主要原因是因为本次系统升级，涉及系统盘独立空间</p>
<p>具体可以看 <a href="https://sspai.com/post/57052">当 Mac 升级到 Catalina 时，苹果在硬盘里施了点魔法</a> 这篇文章。里面有详细讲到，这次升级，苹果对于系统进行的变更。</p>
<h4 id="解决方法">解决方法：</h4>
<p>只需要激活 Alfred 搜索框，输入 reload 清除缓存即可  ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1572089761128.jpg" alt=""></p>
<p>清除之后效果 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1572089877111.jpg" alt=""></p>
<h4 id="问题二">问题二</h4>
<p>升级之后， Alfred 无法搜索到系统自带软件  如下 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1572090063059.jpg" alt=""></p>
<h4 id="解决方法-2">解决方法：</h4>
<p>打开 Alfred 的 Preferences, 定位到 Features-Default Results 中的 Search Scope<br>
点击添加(+), 把 /System/Applications 添加进去<br>
步骤一 ：<br>
<img src="https://UserNameZjw.github.io/post-images/1572090146737.jpg" alt=""><br>
步骤二：<br>
<img src="https://UserNameZjw.github.io/post-images/1572090203013.jpg" alt=""><br>
步骤三：<br>
<img src="https://UserNameZjw.github.io/post-images/1572090328673.jpg" alt=""><br>
步骤四：<br>
<img src="https://UserNameZjw.github.io/post-images/1572090345745.jpg" alt=""></p>
<p>操作完毕，效果如下 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1572090385546.jpg" alt=""></p>
<p>至此，升级 macOS Catalina 对于 Alfred 带来的比较严重的两个影响完全解决。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「坚持」是最难的]]></title>
        <id>https://UserNameZjw.github.io/post/Talk-01</id>
        <link href="https://UserNameZjw.github.io/post/Talk-01">
        </link>
        <updated>2019-08-30T07:04:55.000Z</updated>
        <summary type="html"><![CDATA[<p>突然发现<br>
坚持真的很难<br>
更难的是不坚持<br>
而是不坚持还自以为是</p>
]]></summary>
        <content type="html"><![CDATA[<p>突然发现<br>
坚持真的很难<br>
更难的是不坚持<br>
而是不坚持还自以为是</p>
<!-- more -->
<h3 id="前言有时候人总是后知后觉">前言：有时候，人总是后知后觉</h3>
<p>最近说忙，其实算是一个稍微合理的借口。确实有点，但是确实是没有达到完全充裕的地步，依然有时间去刷剧，并且，回归了游戏💀💀💀</p>
<h3 id="前因">前因</h3>
<p>我后知后觉到什么地步呢？第一期课程，没有完全跟完，因为后期讲的项目是ERP。并不是说ERP没有难度，或者说，没有技术含量。而是有个先入为主的观念，那就是「我做过」！！！</p>
<p>我虽然没有完全系统的做过非常大的ERP，但自己鼓捣过一个，完全由一个人搞定的ERP，小资私企，没有那种成熟的业务逻辑需求，需求自定（很随意的那种，遇到什么问题，就提什么需求），说真的，这一块，超级烦的，随意改，随意提，并且工期需求紧张。</p>
<p>可能，确实是这样的需与求的关系，把我养成了一个比较毛躁，并且很容易妥协的性格，对代码妥协，对需求妥协，对生活妥协。好像提前步入了老年生活。</p>
<p>尤其是，项目完全成熟，没有新需求的一个阶段期。我竟然平均下来，一天的代码编辑量，大概不超过50行，这样的环境状态，持续了将近俩月，有点奔溃。变得更自闭，没有需求沟通，没有业务沟通，甚至，连老板，都很少相互见面了。以前，还是很频繁的，基本每个星期都会核对一下需求与进度。猛地停止，生活状态巨变的感觉。</p>
<h3 id="近况">近况</h3>
<p>最近一个半月，由于 TP6.0 暂未稳定，并且服务器的环境配置，也不支持使用 TP6.0 ,所以就开始用 TP5.1 重写ERP。</p>
<ol>
<li>学完 TP6.0 需要一个自我使用以及熟练地过程</li>
<li>使用 TP5.1 也可以明白 5.1 和 6.0 的区别</li>
<li>现在用的是小众框架</li>
<li>不想给后来人留下一个烂摊子</li>
</ol>
<blockquote>
<p>没有学过 TP5.1<br>
小众框架太小众，网上基本找不到教程<br>
把服务器 PHP 版本升级到5.6<br>
至少以后离职交接，只需要找个懂TP 5.1 即可</p>
</blockquote>
<p>新的项目，算是自己给自己的挑战，TP5.1 + LAYUI ，本身对前端知识就有限，所以就选择了LAYUI，这个对后端极度友好的UI，顺带感谢一下 <a href="https://www.layui.com/">LAYUI</a>  。</p>
<p>一个半月，基本完成了一个部门下的正常运营所需模块，已经在运行。用TP 构造器改造了所有的SQL语句，前端UI，以及访问方式，展示方式，操作方式，都尽最大能力，改成使用 LAYUI 。</p>
<p>开发过程中，遇到过几个卡壳超长时间的前端问题。学艺不精！！！</p>
<p>不过好在，解决的都还挺好，至少，代码在现在的我看来，比几年前写的强很多。</p>
<h3 id="总结">总结</h3>
<ol>
<li>自以为是</li>
<li>贪多</li>
<li>不自控</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」关联模型]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-10</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-10">
        </link>
        <updated>2019-07-10T01:23:37.000Z</updated>
        <summary type="html"><![CDATA[<p>一对一关联<br>
一对多关联</p>
]]></summary>
        <content type="html"><![CDATA[<p>一对一关联<br>
一对多关联</p>
<!-- more -->
<h3 id="前言本文仅介绍最常用的两个关联一对一关联一对多关联">前言：本文仅介绍最常用的两个关联「一对一关联」「一对多关联」。</h3>
<p>参考资料 ：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037599">TP6 模型关联官方文档</a></p>
<h3 id="一对一关联">一对一关联</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037600">TP6 一对一关联官方文档</a></p>
<ol>
<li>hasOne() 正向关联，用于主表关联从表。</li>
<li>belongsTo() 反向关联，用于从表反向关联主表。</li>
</ol>
<p>关联查询<br>
范例：教师表 正向关联 科目表<br>
hasOne()基础用法<br>
教师表文件 Teacher.php ↓</p>
<pre><code>&lt;?php

namespace app\index\model;

use think\Model;

class Teacher extends Model
{
    //定义 Teacher 表关联到科目表
    public function Course()
    {
        return $this-&gt;hasOne(Course::class,'tid','tid');
    }
}
</code></pre>
<p>控制器 Index.php 文件 ↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Teacher;

class Index extends BaseController
{
    public function index()
    {
        $teacher = new Teacher();
        $data = $teacher-&gt;find(1);
        //打印输出老师教授科目
        dump($data-&gt;course-&gt;cname);
    }
}
</code></pre>
<p>效果图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1566975888151.jpg" alt=""></p>
<p>范例：科目表 反向关联 教师表<br>
belongsTo() 基础用法<br>
科目表文件 Course.php ↓</p>
<pre><code>&lt;?php

namespace app\index\model;

use think\Model;

class Course extends Model
{
    public function Teacher()
    {
        return $this-&gt;belongsTo(Teacher::class,'tid','tid');
    }
}
</code></pre>
<p>控制器 Index.php 文件 ↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Course;

class Index extends BaseController
{
    public function index()
    {
        $course = new Course();
        $data = $course-&gt;find(1);
        //打印输出教授科目老师
        dump($data-&gt;teacher-&gt;tname);
    }
}
</code></pre>
<p>效果图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1566977263372.jpg" alt=""></p>
<p>根据关联数据查询<br>
范例：查询老师 id = 2 的姓名与所教科目<br>
hasWhere() 基础用法<br>
控制器 Index.php 文件 ↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Course;

class Index extends BaseController
{
    public function index()
    {
        $course = new Course();
        //根据关联数据，查询 老师表 id = 2  所教课程 对应的tid,科目名称，和老师的名称
        $data = $course-&gt;hasWhere('teacher',['id' =&gt; '2'],'course.*,teacher.*')-&gt;select()-&gt;toArray();

        //闭包查询
        $data1 = $course-&gt;hasWhere('teacher',function ($query){
            $query-&gt;where([['id','=','2']]);
        },'course.*,teacher.*')-&gt;select()-&gt;toArray();
        //打印输出
        dump($data);
        dump($data1);
    }
}
</code></pre>
<p>效果图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1567040169011.jpg" alt=""></p>
<p>一对一关联更新以或保存<br>
save()  存在就更新，不存在就新增<br>
更新范例：更新科目表 id = 1 的任课老师为 SnaiL<br>
控制器 Index.php 文件↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Course;

class Index extends BaseController
{
    public function index()
    {
        $course = new Course();
        $data  = $course-&gt;find(1);
        echo '更新前&lt;br&gt;';
        dump($data-&gt;teacher-&gt;tname);
        $data-&gt;teacher-&gt;save(['tname' =&gt; 'SnaiL']);

        echo '更新后&lt;br&gt;';
        $data  = $course-&gt;find(1);
        dump($data-&gt;teacher-&gt;tname);
    }
}
</code></pre>
<p>效果图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1567043018401.jpg" alt=""></p>
<p>新增范例：新增 [物理] 科目，任课老师为 MaMaKa</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Teacher;

class Index extends BaseController
{
    public function index()
    {
        $teacher = new Teacher();
        $data = ['tname' =&gt; 'MaMaKa','tid' =&gt; '01'];

        $id = $teacher-&gt;insertGetId($data);
        $teach = $teacher-&gt;find($id);
        $teach-&gt;course()-&gt;save(['cname' =&gt; '物理','cid' =&gt; '01']);

        $rs = $teacher-&gt;find($id);
        dump($rs-&gt;course-&gt;cname);
    }
}
</code></pre>
<p>效果图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1567058142293.jpg" alt=""></p>
<h3 id="一对多关联">一对多关联</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037601">TP6 一对多关联官方文档</a></p>
<ol>
<li>一切操作，对标一对一关联范例😂😂😂</li>
<li>不是我懒，而是我真的懒</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」模板使用]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-9</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-9">
        </link>
        <updated>2019-07-08T05:47:17.000Z</updated>
        <summary type="html"><![CDATA[<p>TP6 模(mu)板基本使用</p>
]]></summary>
        <content type="html"><![CDATA[<p>TP6 模(mu)板基本使用</p>
<!-- more -->
<h3 id="前言一">前言一：</h3>
<p>TP5.1 文档仅做参考，因为 TP6 里，不再支持 $this 的写法</p>
<pre><code>$this-&gt;assign('name', 'thinkphp');
return $this-&gt;fetch();
</code></pre>
<p>建议改为静态调用 use think\facade\View;  的用法</p>
<pre><code>&lt;?php
namespace app\admin\controller;

use app\BaseController;
use think\facade\View;

class Index extends BaseController
{
    public function index()
    {
        View::assign([
            'name' =&gt; 'ThinkPHP',
        ]);
        return View::fetch();
    }
}
</code></pre>
<h3 id="前言二">前言二：</h3>
<p>TP6 最新版 view 架构，已经由应用目录下创建 view 目录，提升到根目录下的 view<br>
新旧对比图（左「新」| 右「旧」）<br>
<img src="https://UserNameZjw.github.io/post-images/1563331585741.jpg" alt=""></p>
<h3 id="正文">正文</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp5_1/354069">TP5.1 模板 官方文档</a></p>
<blockquote>
<p>因为 TP6 还在开发中，再加上 TP6 支持自定义模板规则，所以暂时到写文为止，还没有模板的详细介绍</p>
</blockquote>
<h3 id="模板变量赋值及输出演示">模板变量赋值及输出演示</h3>
<p>Controller 下 Index.php 的 index() 方法代码 ↓</p>
<pre><code>&lt;?php
namespace app\admin\controller;

use app\BaseController;
use think\facade\View;

class Index extends BaseController
{
    public function index()
    {
        View::assign([
            //简单赋值
            'name' =&gt; 'ThinkPHP',
            //数组赋值
            'data' =&gt; ['name' =&gt; 'Cry','name2' =&gt; 'Snail'],
            //二维数组
            'list' =&gt; [
                ['name' =&gt; 'Cry'],
                ['name' =&gt; 'Snail']
            ]
        ]);
        return View::fetch();
    }
}
</code></pre>
<p>对应的 HTML 模板代码  ↓</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
简单赋值调用
&lt;!--litera 是用来原样输出的--&gt;
{literal}
    模板输出 {$name}
{/literal}
&lt;br&gt;
{$name}
&lt;hr&gt;

数组赋值调用
{literal}
    模板输出 {$data.name}/{$data.name2}
{/literal}
&lt;br&gt;
{$data.name}/{$data.name2}
&lt;hr&gt;

二维数组循环 两种方式 foreach | volist &lt;br&gt;

foreach 模板使用 &lt;br&gt;
{literal}
    {foreach $list as $key=&gt;$vo }&lt;br&gt;
        {$vo.name}&lt;br&gt;
    {/foreach}&lt;br&gt;
{/literal}
&lt;br&gt;
foreach 的 key 从 0 起始 &lt;br&gt;
{foreach $list as $key=&gt;$vo }
    {$key} &gt;&gt; {$vo.name}&lt;br&gt;
{/foreach}
&lt;hr&gt;

volist 模板使用 &lt;br&gt;
{literal}
    {volist name='list' id='vo' k='i' }&lt;br&gt;
        {$vo.name}&lt;br&gt;
    {/volist}&lt;br&gt;
{/literal}
&lt;br&gt;
volist 的 key 从 1 起始 &lt;br&gt;
{volist name='list' id='vo' k='i' }
    {$i} &gt;&gt; {$vo.name}&lt;br&gt;
{/volist}

&lt;hr&gt;
使用函数 {literal} {:函数名} {/literal}&lt;br&gt;
使用 MD5() 函数加密 $data.name &lt;br&gt;
如 {literal} {:MD5($data.name)} / {$data.name | md5} {/literal} &lt;br&gt;
加密后 {:MD5($data.name)} / {$data.name | md5}
&lt;hr&gt;
默认值 default &lt;br&gt;
{literal} {$data.names|default=&quot;没有字符串的时候出现我&quot;} {/literal} &lt;br&gt;
{$data.names|default=&quot;没有字符串的时候出现我&quot;}

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>输出图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1563335694394.jpg" alt=""></p>
<h3 id="内置标签">内置标签</h3>
<p>参考资料 ：<a href="https://www.kancloud.cn/manual/thinkphp5_1/354083">TP5.1 内置标签 官方文档</a><br>
自由扩展😂😂😂</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」路由基础使用]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-8</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-8">
        </link>
        <updated>2019-07-06T06:37:20.000Z</updated>
        <summary type="html"><![CDATA[<p>路由基础定义<br>
静态路由<br>
动态路由</p>
]]></summary>
        <content type="html"><![CDATA[<p>路由基础定义<br>
静态路由<br>
动态路由</p>
<!-- more -->
<h3 id="前言本篇例子均在多应用模式执行">前言：本篇例子，均在多应用模式执行</h3>
<h3 id="路由须知">路由须知</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037494">TP6 路由介绍官方文档</a></p>
<p>须知一:</p>
<blockquote>
<p>TP6 会自动加载 route 目录下所有的文件，把所有的路由规则都写在一个文件里，和写在多个文件里，本质上是一样的。<br>
区分多个文件来写，仅为了维护更方便。</p>
</blockquote>
<p>须知二:</p>
<blockquote>
<p>由于 TP6 默认单应用模式<br>
所以 TP6 的「单应用」模式与「多应用」模式的路由目录架构不完全一样<br>
<img src="https://UserNameZjw.github.io/post-images/1562395791000.jpg" alt=""></p>
</blockquote>
<p>须知三:</p>
<blockquote>
<p>每个单独应用，都可以进行单独的路由配置<br>
只需要在应用目录下创建 /config/route.php 文件进行路由配置<br>
在单应用关闭路由功能，只需要在 /congif/app.php 设置 'with_route'    =&gt;    false<br>
index应用下，目录结构 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1562397139681.jpg" alt=""><br>
一般情况下，基本不需要</p>
</blockquote>
<h3 id="路由定义">路由定义</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037495">TP6 路由定义 官方文档</a></p>
<p>文件路径(多应用模式)<br>
<img src="https://UserNameZjw.github.io/post-images/1562398229469.jpg" alt=""></p>
<p>1.基础使用<br>
index.php 代码 ↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;

class Index extends BaseController
{
    public function snail($name = &quot;Cry&quot;,$username = &quot;路由测试&quot;){
        return &quot;棒棒哒~~&quot;.$name.&quot;恭喜你,&quot;.$username.&quot;,跳转成功&quot;;
    }
}
</code></pre>
<p>路由定义代码 ↓</p>
<pre><code>&lt;?php
use think\facade\Route;

//基础设置，get 访问
Route::rule(&quot;snail1&quot;,&quot;index/index/snail&quot;,&quot;get&quot;);
</code></pre>
<p>2.路由动态传值<br>
动态传值代码 ↓</p>
<pre><code>&lt;?php
use think\facade\Route;

//基础设置，动态传参
//两种方法等同
Route::rule(&quot;snail1/:name/:username&quot;,&quot;index/index/snail&quot;,&quot;get&quot;);

Route::rule(&quot;snail1/&lt;name&gt;/&lt;username&gt;&quot;,&quot;index/index/snail&quot;,&quot;get&quot;);
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1562400693593.jpg" alt=""></p>
<blockquote>
<ol>
<li>路由动态传参，路由会自动对应绑定传值，但不可顺序错乱</li>
<li>路由中定义的 /:name/:username 参数，为必传参数，如果缺少，则报错</li>
</ol>
</blockquote>
<p>3.动态传值，可选参数</p>
<pre><code>&lt;?php
use think\facade\Route;

//基础设置，动态传参
//两种方法等同
Route::rule(&quot;snail1/:name/:username/[:nickname]&quot;,&quot;index/index/snail&quot;,&quot;get&quot;);

Route::rule(&quot;snail1/&lt;name&gt;/&lt;username&gt;/&lt;nickname?&gt;&quot;,&quot;index/index/snail&quot;,&quot;get&quot;);
</code></pre>
<blockquote>
<p>在不传 nickname 变量情况下，也不会报错</p>
</blockquote>
<p>4.路由参数<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037499">TP6 路由参数 官方文档</a></p>
<ol>
<li>调用方法名设置</li>
</ol>
<pre><code>&lt;?php
use think\facade\Route;

//仅允许 html 与 shtml 后缀访问
Route::rule(&quot;snail1/:name/:username/[:nickname]&quot;,&quot;index/index/snail&quot;,&quot;get&quot;)-&gt;ext(&quot;html|shtml&quot;);

//禁止掉无后缀访问
Route::rule(&quot;snail1/&lt;name&gt;/&lt;username&gt;/&lt;nickname?&gt;&quot;,&quot;index/index/snail&quot;,&quot;get&quot;)-&gt;denyExt(&quot;&quot;);
</code></pre>
<ol start="2">
<li>option 批量设置</li>
</ol>
<pre><code>&lt;?php
use think\facade\Route;

Route::rule(&quot;snail1/&lt;name&gt;/&lt;username&gt;/&lt;nickname?&gt;&quot;,&quot;index/index/snail&quot;,&quot;get&quot;)
    -&gt;option([
        //禁止空后缀
        &quot;deny_ext&quot; =&gt; &quot;&quot;,
        //仅允许 html 与 shtml 后缀
        &quot;ext&quot; =&gt; &quot;html|shtml&quot;,
        //禁止https 访问
        &quot;https&quot; =&gt; false,
        //设置访问域名
        &quot;domain&quot; =&gt; &quot;127.0.0.1&quot;
    ]);
</code></pre>
<blockquote>
<p>option() 数组格式数据</p>
</blockquote>
<p>5.路由分组<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037500">TP6 路由分组 官方文档</a><br>
简化路由定义，提高路由匹配效率</p>
<pre><code>&lt;?php
use think\facade\Route;

Route::group(&quot;snail1&quot;,function(){
    Route::rule(&quot;:name&quot;,&quot;index/index/snail&quot;);
    Route::rule(&quot;:username&quot;,&quot;index/index/snail&quot;);
})
    -&gt;ext(&quot;html|shtml&quot;)
    -&gt;https(false)
    -&gt;pattern([
        &quot;name&quot; =&gt; &quot;\d+&quot;,
        &quot;username&quot; =&gt; &quot;\w+&quot;
    ])
    ;
</code></pre>
<p>6.注解路由<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037502">TP6 注解路由 官方文档</a><br>
注意：需要进入到项目根目录下然后再执行</p>
<pre><code>composer require topthink/think-annotation 
</code></pre>
<p>注解路由，可以直接在「控制器」文件内写<br>
注解路由需要 use think\annotation\Route;<br>
以下是 index.php 文件代码 ↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\annotation\Route;

class Index extends BaseController
{
    public function index(){
        return &quot;Index&quot;;
    }

    /**
     * @param string $name
     * @param string $username
     * @param string $nickname
     * @return string
     * @Route(&quot;snail1/:name/:username/[:nickname]&quot;,method=&quot;GET&quot;,https=0,ext=&quot;html|shtml&quot;,deny_ext=&quot;&quot;)
     */

    public function snail($name = &quot;Cry&quot;,$username = &quot;路由测试&quot;,$nickname = &quot;&quot;){
        return &quot;棒棒哒~~name=&quot;.$name.&quot;,恭喜你,username=&quot;.$username.&quot;,跳转成功,nickname=&quot;.$nickname;
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1562563051363.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」模型 增、删、改、查]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-7</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-7">
        </link>
        <updated>2019-06-27T03:05:14.000Z</updated>
        <summary type="html"><![CDATA[<p>模型的 增、删、改、查</p>
]]></summary>
        <content type="html"><![CDATA[<p>模型的 增、删、改、查</p>
<!-- more -->
<h3 id="定义">定义</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037580">TP6 模型定义官网文档</a><br>
app\index\controller\Index.php 代码</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $user = new Tp();
        $arr = $user-&gt;getId(2);
        dump($arr);
    }

}
</code></pre>
<p>app\index\model\Tp.php 代码</p>
<pre><code>&lt;?php

namespace app\index\model;

use think\Model;

class Tp extends Model
{
    public function getUser($where = null){
        $arr = $this-&gt;where( ($where = null) ? &quot; id &gt;0 &quot; : $where);
        return $arr;
    }

    public function getId($id){

        $this-&gt;model = $this-&gt;getUser();
        return $this-&gt;model-&gt;find($id)-&gt;toArray();
    }

}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561606176769.png" alt=""></p>
<blockquote>
<p>注意：</p>
<ol>
<li>模型定义，最好在各自的应用下的 model 文件夹下， 如 index 文件夹就是一个应用</li>
<li>模型其实就是 Db:: 类的一个增强，Db:: 类的所有语法，都可以在 model 使用</li>
<li>模型中返回的数据均是 「对象」 格式，调用元素需要用箭头指向 -&gt;</li>
<li>如果需要返回数组，可以在模型中，调用 toArray() 返回数组形式</li>
</ol>
</blockquote>
<h3 id="模型字段">模型字段</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037581">TP6 模型字段官方文档</a></p>
<blockquote>
<p>如有需求，自行参考</p>
</blockquote>
<h3 id="增">增</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037582">TP6 模型-&gt;新增 官方文档</a></p>
<ol>
<li>save()  单条插入数据，成功返回true</li>
<li>saveAll() 批量插入数据，成功返回数据集</li>
<li>静态调用 create() 成功返回对象数据</li>
</ol>
<p>save() 基础用法代码</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $user = new Tp();
        $data = [
            &quot;nickname&quot; =&gt; &quot;modelSave&quot;,
            &quot;email&quot; =&gt; &quot;modelSave@qq.com&quot;,
            &quot;age&quot; =&gt; 18
        ];
        $back = $user-&gt;save($data);
        dump($back);
    }

}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561607584749.jpg" alt=""></p>
<p>save() 获取自增主键<br>
在我看来，这个真的繁琐<br>
如果仅仅是需要返回主键，可以直接用Db:: 写法调用 insertGetId()</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $user = new Tp();
        $user-&gt;nickname = &quot;modelSave&quot;;
        $user-&gt;email = &quot;modelSave@qq.com&quot;;
        $user-&gt;age = 19;
        $user-&gt;save();
        //打印对象 id 主键
        dump($user-&gt;id);
        //返回对象
        return $user;
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561609920487.jpg" alt=""></p>
<p>saveAll() 使用方法</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $tp = new Tp();
        $data =
            [
                [
                    &quot;nickname&quot; =&gt; &quot;modelSave1&quot;,
                    &quot;email&quot; =&gt; &quot;modelSave@qq.com1&quot;,
                    &quot;age&quot; =&gt; 11
                ],
                [
                    &quot;nickname&quot; =&gt; &quot;modelSave2&quot;,
                    &quot;email&quot; =&gt; &quot;modelSave@qq.com2&quot;,
                    &quot;age&quot; =&gt; 12
                ],
                [
                    &quot;nickname&quot; =&gt; &quot;modelSave3&quot;,
                    &quot;email&quot; =&gt; &quot;modelSave@qq.com3&quot;,
                    &quot;age&quot; =&gt; 13
                ],
            ];
        $back = $tp-&gt;saveAll($data);
        //返回对象
        return $back;
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561613350850.jpg" alt=""></p>
<p>静态调用 create()</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $data = [
            &quot;nickname&quot; =&gt; &quot;modelSave&quot;,
            &quot;email&quot; =&gt; &quot;modelSave@qq.com&quot;,
            &quot;age&quot; =&gt; 18
        ];
        //静态调用，编辑器不提示哦
        $tp = Tp::create($data);
        //返回对象
        return $tp;
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561612590741.jpg" alt=""></p>
<p>筛选插入</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $data = [
            &quot;nickname&quot; =&gt; &quot;筛选插入&quot;,
            &quot;email&quot; =&gt; &quot;不许插入&quot;
        ];
        $tp = Tp::create($data,[&quot;nickname&quot;]);
        dump($tp);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561809721324.jpg" alt=""></p>
<blockquote>
<ol>
<li>关于自动筛选以及自动插入，都会有个操作时间，可以在 config/database/php 设置</li>
<li>默认配置 'auto_timestamp'  =&gt; true 意思是自动完成。如果需要特别指定，可以按照注释配置</li>
<li>create 第二个参数，数组形式，是允许插入的字段</li>
</ol>
</blockquote>
<p>总结：尽量用 create() 静态方式新增单条数据，批量插入选择 saveAll() ，所有插入方法，均自动完成筛选。</p>
<h3 id="改">改</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037583">TP6 模型-&gt; 更新 官方文档</a></p>
<ol>
<li>save() 使用方法自行领会，成功返回true</li>
<li>saveAll() 使用方法同save()，成功返回对象数据集</li>
<li>静态调用 update()  成功返回对象数据</li>
</ol>
<p>save() 与 saveAll() 不做详解 🤣🤣🤣</p>
<p>静态调用 update()</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        //如果变更数据中有主键，可以免写第二参数 $where 条件
        $data = [
            &quot;nickname&quot; =&gt; &quot;upName&quot;,
            &quot;email&quot; =&gt; &quot;upEmail&quot;,
            &quot;id&quot; =&gt; 26
        ];
        return Tp::update($data);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561617295249.jpg" alt=""></p>
<p>筛选修改</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $data = [
            &quot;nickname&quot; =&gt; &quot;筛选插入&quot;,
            &quot;email&quot; =&gt; &quot;不许插入&quot;
        ];
        $tp = Tp::update($data,[&quot;id&quot; =&gt; 26],[&quot;email&quot;]);
        return $tp;
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561812024566.jpg" alt=""></p>
<blockquote>
<p>注意：</p>
<ol>
<li>单条修改，依然推荐静态调用 update() ，多条推荐 saveAll()</li>
<li>如果修改数据中包含唯一主键，可以不传递条件参数</li>
<li>条件参数，数组形式 ['id' =&gt; 26]</li>
<li>筛选修改，第三个参数，数组形式，是允许的字段</li>
</ol>
</blockquote>
<h3 id="查">查</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037585">TP6 模型-&gt; 查询 官方文档</a></p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        //可以用 Db 类所有写法
        //静态查询
        echo &quot;查询单条 find() 默认条件查询是唯一主键 返回对象&lt;br&gt;
               用toArray() 转数组格式&quot;;
        dump(Tp::find(26)-&gt;toArray());
        //查询多条
        echo &quot;查询多条 select() 默认条件查询是唯一主键 返回对象&lt;br&gt;
               用toArray() 转数组格式&quot;;
        dump(Tp::select([23,24])-&gt;toArray());

        //查询单条
        echo &quot;查询单条 find() 默认条件查询是唯一主键 返回对象&lt;br&gt;
               用toArray() 转数组格式&quot;;
        $tp = new Tp();
        dump($tp-&gt;find(26)-&gt;toArray());

        echo &quot;查询单条 select() 默认条件查询是唯一主键 返回对象&lt;br&gt;
               用toArray() 转数组格式&quot;;
        dump($tp-&gt;select([23,24])-&gt;toArray());
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561619193582.jpg" alt=""></p>
<blockquote>
<p>注意：</p>
<ol>
<li>不管是在「控制器」还是在「模型」中，均支持 Db 类的所有写法</li>
<li>「控制器」推荐静态写法，如 Tp::where()-&gt;find()</li>
<li>「模型」推荐写法，如 $this-&gt;where()-&gt;find()</li>
</ol>
</blockquote>
<p>字段动态查询</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        //如果查询为空，不能接toArray()
        $tp = Tp::getByNickname(&quot;snail&quot;)-&gt;toArray();
        dump($tp);

        $tp = Tp::getByAge(&quot;12&quot;)-&gt;toArray();
        dump($tp);

        $tp = Tp::getByEmail(&quot;668346&quot;)-&gt;toArray();
        dump($tp);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561818889487.jpg" alt=""></p>
<blockquote>
<p>注意：</p>
<ol>
<li>getBy 接你的字段，注意驼峰写法</li>
<li>例：查询 nickname 字段 需要写成 getByNickname</li>
<li>比对使用的是 = 运算符</li>
<li>返回结果都是单条查询</li>
</ol>
</blockquote>
<h3 id="删">删</h3>
<p>delete() 成功返回 true/false<br>
静态调用 destroy()<br>
闭包条件删除</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        //三种删除方法
        // 动态 delete()
        $tp = new Tp();
        $back = $tp-&gt;where(&quot;id&quot;,&quot;=&quot;,18)-&gt;delete();

        //静态调用
        $del = Tp::destroy([26,27]);
        echo $del;

        //闭包条件删除
        echo Tp::destroy(function ($query){
            $query-&gt;where(&quot;id&quot;,&quot;&gt;&quot;,&quot;20&quot;);
        });
    }
}
</code></pre>
<blockquote>
<p>注意：</p>
<ol>
<li>推荐闭包删除</li>
<li>单独使用 destroy() 删除，传入主键ID ，数组形式</li>
</ol>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」数据库链式操作]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-6</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-6">
        </link>
        <updated>2019-06-23T02:04:17.000Z</updated>
        <summary type="html"><![CDATA[<p>原生查询  聚合查询<br>
高级查询  视图查询<br>
子查询</p>
]]></summary>
        <content type="html"><![CDATA[<p>原生查询  聚合查询<br>
高级查询  视图查询<br>
子查询</p>
<!-- more -->
<h3 id="原生查询">原生查询</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037570">TP6 原生查询官方文档</a><br>
原生查询可以说是让人又爱又恨<br>
简单的语句用不到，复杂的语句用TP6 的构造器又更麻烦，导致无法彻底抛弃原生<br>
query() 可执行任何原生语句<br>
execute() 仅用于更新以及写入数据，不可做其他用处</p>
<blockquote>
<p>因为execute() 在SQL语句无错误的情况下，仅返回受影响条数，否则返回false</p>
</blockquote>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //下面用原生查询 think_tp 表中的所有数据
        $sql = &quot; SELECT * FROM think_tp &quot;;
        dump(Db::query($sql));

        //用execute() 执行查询语句
        dump(Db::execute($sql));
    }
}
</code></pre>
<p>图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561256581994.png" alt=""></p>
<h3 id="聚合查询">聚合查询</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037564">TP6 聚合查询官方文档</a><br>
在查询中，经常用到一些需要统计数据<br>
count()	统计数量，参数是要统计的字段名（可选）<br>
max()	获取最大值，参数是要统计的字段名（必须）<br>
min()	获取最小值，参数是要统计的字段名（必须）<br>
avg()	获取平均值，参数是要统计的字段名（必须）<br>
sum()	获取总和，参数是要统计的字段名（必须）</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //查询 think_tp 表数据总条数
        echo &quot;count() 查询总条数&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;count());

        echo &quot;查询 age 最大值&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;max(&quot;age&quot;));

        echo &quot;查询 age 最小值&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;min(&quot;age&quot;));

        echo &quot;查询 age 平均值&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;avg(&quot;age&quot;));

        echo &quot;查询 age 总和&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;sum(&quot;age&quot;));
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561257598179.jpg" alt=""></p>
<blockquote>
<p>注意：max() min() 支持第二个参数，是否开启强制转换，因为有时候，查询的字段并不都是数值<br>
第二值默认为 true ，可传入 false 关闭强制转换</p>
</blockquote>
<h3 id="高级查询">高级查询</h3>
<p>参考链接：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037566">TP6 高级查询官方文档</a></p>
<p>1.快捷查询<br>
快捷查询方式是一种多字段相同查询条件的简化写法<br>
| 代表 or ，&amp; 代表 and</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //快捷查询 | 代表or ，&amp; 代表 and
        $back = Db::name(&quot;tp&quot;)
            -&gt;where(&quot;id|email&quot;,&quot;like&quot;,&quot;12%&quot;)
            -&gt;where(&quot;id&amp;age&quot;,&quot;&gt;&quot;,&quot;9&quot;)
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where(&quot;id|emali&quot;,&quot;like&quot;,&quot;12%&quot;)
            -&gt;where(&quot;id&amp;age&quot;,&quot;&gt;&quot;,&quot;9&quot;)
            -&gt;fetchSql()
            -&gt;select();

        dump($back);

    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561359487306.jpg" alt=""></p>
<p>2.批量（字段）查询</p>
<p>基础用法</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        $back = Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;&gt;&quot;,&quot;4&quot;]
            ])
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;&gt;&quot;,&quot;4&quot;]
            ])
            -&gt;fetchSql()
            -&gt;select();

        dump($back);

    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561360542975.jpg" alt=""></p>
<p>exp BUG疑问<br>
此BUG（暂做BUG看）告诉我们，字段与字段比对，必须exp<br>
whereExp()</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        $back = Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;&gt;&quot;,&quot;age&quot;]
            ])
            -&gt;select();
        echo Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;&gt;&quot;,&quot;age&quot;]
            ])
            -&gt;fetchSql()
            -&gt;select();
        
        $back2 = Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;exp&quot;,Db::raw(&quot;&gt;age&quot;)]
            ])
            -&gt;select();
        echo &quot;&lt;br&gt;&quot;.Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;exp&quot;,Db::raw(&quot;&gt;age&quot;)]
            ])
            -&gt;fetchSql()
            -&gt;select();

        dump($back);
        dump($back2);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561363274133.jpg" alt=""></p>
<blockquote>
<p>注意：exp 必须配合 Db::raw() 使用</p>
</blockquote>
<p>3.数组组合方式，直接变量组合</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //数组查询方式，变量直接组合
        $email = &quot;Sn&quot;;
        $nick = &quot;s&quot;;
        $back = Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;],
                [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
            ])
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;],
                [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
            ])
            -&gt;fetchSql()
            -&gt;select();
        dump($back);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561366312794.jpg" alt=""></p>
<p>4.闭包查询</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //闭包查询
        $email = &quot;Sn&quot;;
        $nick = &quot;s&quot;;
        $back = Db::name(&quot;tp&quot;)
            -&gt;where(function ($query) use ($email,$nick){
                $query-&gt;where([
                        [&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;],
                        [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
                ]);
            })
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where(function ($query) use ($email,$nick){
                $query-&gt;where([
                    [&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;],
                    [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
                ]);
            })
            -&gt;fetchSql()
            -&gt;select();
        dump($back);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561367263604.jpg" alt=""></p>
<p>5.混合查询<br>
只要符合语法规则的写法，都能同时一起写</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //混合查询
        $email = &quot;Sn&quot;;
        $nick = &quot;s&quot;;
        $back = Db::name(&quot;tp&quot;)
            //变量组合写法
            -&gt;where(&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;)
            //闭包写法
            -&gt;where(function ($query) use ($email){
                $query-&gt;where([
                    [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
                ])
                //字符串写法
                -&gt;whereOr(&quot;age &gt; 0 and 1=1&quot;);
            })
            //快捷写法
            -&gt;where(&quot;id|age&quot;,&quot;&gt;&quot;,0)
            //字符串条件查询，绑定写法
            -&gt;whereRaw(&quot;email like :email&quot;,[&quot;email&quot; =&gt; $email.&quot;%&quot;])
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where(&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;)
            -&gt;where(function ($query) use ($email){
                $query-&gt;where([
                    [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
                ])
                    -&gt;whereOr(&quot;age &gt; 0 and 1=1&quot;);
            })
            -&gt;where(&quot;id|age&quot;,&quot;&gt;&quot;,0)
            -&gt;whereRaw(&quot;email like :email&quot;,[&quot;email&quot; =&gt; $email.&quot;%&quot;])
            -&gt;fetchSql()
            -&gt;select();
        dump($back);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561379697950.jpg" alt=""></p>
<p>6.更多快捷方法<br>
<img src="https://UserNameZjw.github.io/post-images/1561379891833.jpg" alt=""></p>
<h3 id="视图查询">视图查询</h3>
<p>多表查询，join 的推荐替代方法</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        $back = Db::view(&quot;tp a&quot;,&quot;id,nickname&quot;)
            -&gt;view(&quot;tp1 b&quot;,&quot;id,email,nickname&quot;,&quot;a.id = b.id&quot;,&quot;LEFT&quot;)
            -&gt;where(&quot;a.id&quot;,&quot;&gt;&quot;,&quot;5&quot;)
            -&gt;select();

        echo Db::view(&quot;tp a&quot;,&quot;id,nickname&quot;)
            -&gt;view(&quot;tp1 b&quot;,&quot;id,email,nickname&quot;,&quot;a.id = b.id&quot;,&quot;LEFT&quot;)
            -&gt;where(&quot;a.id&quot;,&quot;&gt;&quot;,&quot;5&quot;)
            -&gt;fetchSql()
            -&gt;select();

        dump($back);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561382496575.jpg" alt=""></p>
<blockquote>
<p>注意：如果使用数组形式设置别名，如果表名有前缀，需要写前缀<br>
如 think_ 为表前缀，需写成 ['think_tp' =&gt; 'a'] 不然报错</p>
</blockquote>
<h3 id="子查询">子查询</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037569">TP6 子查询官方文档</a></p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //其实子查询，就是利用TP 构造器返回 sql 语句 而不执行
        echo &quot;fetchSql() 可以用在任何sql构造中，不仅限于 select() &quot;;
        dump(
            Db::name(&quot;tp&quot;)
                -&gt;where(&quot;id&quot;,&quot;&gt;&quot;,&quot;5&quot;)
                -&gt;fetchSql()
                -&gt;select()
        );

        echo &quot;buildSql() 一般纯用于构造sql 返回，后续不能跟随 select() update() 之类&lt;br&gt;
                并且可以返回到变量中，作为复用，此方法会把 sql 语句用（）包裹起来&quot;;
        dump(
            Db::name(&quot;tp&quot;)
                -&gt;where(&quot;id&quot;,&quot;&gt;&quot;,&quot;5&quot;)
                -&gt;buildSql()
        );

        echo &quot;利用闭包特性，会在sql 构造中，把闭包内容用 （）包裹的特性&quot;;
        dump(
            Db::name(&quot;tp&quot;)
                -&gt;where(&quot;id&quot;,&quot;in&quot;,function ($query){
                    $query-&gt;name(&quot;tp1&quot;)
                    -&gt;where(&quot;id&quot;,&quot;&gt;&quot;,5)
                    -&gt;field(&quot;id&quot;);
                })
                -&gt;fetchSql()
                -&gt;select()
        );
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561384804354.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」数据库连接与操作]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-5</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-5">
        </link>
        <updated>2019-06-21T07:23:14.000Z</updated>
        <summary type="html"><![CDATA[<p>数据库链接配置<br>
数据库操作</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据库链接配置<br>
数据库操作</p>
<!-- more -->
<h3 id="连接数据库">连接数据库</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037531">TP6 连接数据库官方文档</a><br>
1.单链接配置<br>
修改 app\database.php 文件  由于配置项太多，仅拿官方例子展示<br>
配置上每一项都有注释说明，需要注意的就是文件路径而已🤣🤣</p>
<pre><code>return [
    'default'    =&gt;    'mysql',
    'connections'    =&gt;    [
        'mysql'    =&gt;    [
            // 数据库类型
            'type'        =&gt; 'mysql',
            // 服务器地址
            'hostname'    =&gt; '127.0.0.1',
            // 数据库名
            'database'    =&gt; 'thinkphp',
            // 数据库用户名
            'username'    =&gt; 'root',
            // 数据库密码
            'password'    =&gt; '',
            // 数据库连接端口
            'hostport'    =&gt; '',
            // 数据库连接参数
            'params'      =&gt; [],
            // 数据库编码默认采用utf8
            'charset'     =&gt; 'utf8',
            // 数据库表前缀
            'prefix'      =&gt; 'think_',
        ],
    ],
];
</code></pre>
<p>2.多连接配置<br>
篇幅太长就直接截图说明<br>
<img src="https://UserNameZjw.github.io/post-images/1561107241843.png" alt=""><br>
值得一提的是，TP6 引入了 env 环境变量机制，并且环境变量机制优先于 database.php 配置<br>
关于 evn ，我在之前的 <a href="https://usernamezjw.github.io/post/thinkphp-6-2/">部分配置与控制器</a> 中有说明，找到开启开发调试模式，就能看到。<br>
.env 代码 ↓</p>
<pre><code>APP_DEBUG = true

[APP]
DEFAULT_TIMEZONE = Asia/Shanghai

[DATABASE]
TYPE = mysql
HOSTNAME = 127.0.0.1
DATABASE = tp6
USERNAME = root
PASSWORD =
HOSTPORT = 3306
CHARSET = utf8
DEBUG = true

[LANG]
default_lang = zh-cn
</code></pre>
<blockquote>
<p>注意：.env 文件里的设置，与 database.php 的文件呼应关系如下<br>
如果是多连接配置<br>
请保持两个文件内相呼应一致<br>
即，.env 有几个配置，database.php 就有几个配置<br>
.env 配置 同理于 database.php ，只需要复制相同部分，然后在 database.php 修改标识部分即可<br>
<img src="https://UserNameZjw.github.io/post-images/1561122830109.png" alt=""></p>
</blockquote>
<p>database.php文件 <img src="https://UserNameZjw.github.io/post-images/1561122441280.png" alt=""><br>
.env 文件 <img src="https://UserNameZjw.github.io/post-images/1561122448342.png" alt=""></p>
<p>在数据操作时，可以通过 connect() 方法指定需要使用的数据库连接配置</p>
<h3 id="数据库操作">数据库操作</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037620">TP6 SQL调试官方文档</a><br>
另，可以查询 app/vendor/topthink/framework/src/think/db/BaseQuery.php 文件，开启新世界</p>
<p>1.增<br>
save() 单条新增，成功返回新增条数<br>
insert()  单条新增，成功返回新增条数<br>
insertAll()  多条新增，成功返回新增条数<br>
insertGetId()  单条新增，成功返回新增数据自增ID<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037534">TP6 添加数据官方文档</a></p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
//        单条数据插入，save() insert() 两种方法等同效果。
//        使用 save() 新增数据
//        $data = ['nickname' =&gt; 'save','email' =&gt; '123@snail.com'];
//        $ins = Db::name('tp')-&gt;save($data);

//        使用insert()新增数据
//        $data = ['nickname' =&gt; 'insert','email' =&gt; '123@snail.com'];
//        $ins = Db::name('tp')-&gt;insert($data);
//
//        多条数据插入 insertAll()
//        数据组合为二维数组
//        $data =
//            [
//                ['nickname' =&gt; 'insertAll1','email' =&gt; '123@snail.com'],
//                ['nickname' =&gt; 'insertAll2','email' =&gt; '123@snail.com']
//            ];
        //单条数据插入，但是返回插入数据自增ID。
        $data = ['nickname' =&gt; 'insertGetId','email' =&gt; '123@snail.com'];
        $ins = Db::name('tp')-&gt;insertGetId($data);

        if($ins){
           return &quot;插入成功&quot;;
        }else{
            return &quot;插入失败&quot;;
        }
    }
}
</code></pre>
<p>结果图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561125241203.png" alt=""></p>
<p>2.查<br>
find()  单条查询，成功返回一维数组<br>
select() 多条查询，成功返回二维数组<br>
value()  查询某个字段的值，成功返回字符串<br>
column()  查询某一列的值，成功返回二维数组<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037533">TP6 查询数据官方文档</a></p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
//        查询ID为5的单条数据，返回一维数组
//        $data = Db::name(&quot;tp&quot;)-&gt;find(&quot;5&quot;);

//        查询数据库内所有数据，返回二维数组
//        $data = Db::name(&quot;tp&quot;)-&gt;select();

//        查询单条某个字段的值，返回字符串
//        $data = Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;5&quot;)-&gt;value(&quot;nickname&quot;);

//        查询多条数据，返回二维数组
        $data = Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;&gt;&quot;,&quot;5&quot;)-&gt;column(&quot;*&quot;,&quot;id&quot;);
        dump($data);
    }
}
</code></pre>
<p>3.改<br>
save()  单条修改，成功返回条数<br>
update()  单/多条修改，成功返回条数<br>
inc() 自增<br>
dec()  自减<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037535">TP6 更新数据官方文档</a></p>
<ol>
<li>save() 使用详解</li>
</ol>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //配置save() 修改数据，需要指定包含主键 id 才会修改数据，否则将会新增数据
        $data = [&quot;id&quot;=&gt;&quot;7&quot;,&quot;nickname&quot; =&gt; &quot;saveUp&quot;];

        //打印修改前数据
        echo &quot;修改前&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(&quot;7&quot;));
        
        //修改数据
        Db::name(&quot;tp&quot;)-&gt;save($data);

        //打印修改后数据
        echo &quot;修改后&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(&quot;7&quot;));
    }
}
</code></pre>
<p>图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561128218256.png" alt=""><br>
2. update() 详解</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //组合数据形式，分别是update()使用，以及data()使用
        $updateUp = [&quot;nickname&quot; =&gt; 'updateUp'];
        $dataUp = [&quot;nickname&quot; =&gt; 'dataUp'];

        //打印修改前数据
        echo &quot;打印修改前数据&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(7));

        //使用data()传值方式修改
        Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;7&quot;)-&gt;data($dataUp)-&gt;update();

        //打印data()传值修改后数据
        echo &quot;打印data()传值修改后数据&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(7));

        //同时使用data() 和 update()传值方式，update() 法优先级于 data() 传值
        Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;7&quot;)-&gt;data($dataUp)-&gt;update($updateUp);

        //打印update()传值修改后数据
        echo &quot;打印update()传值修改后数据,如果update()不优先级，数据应该无变化&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(7));
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561129037853.png" alt=""></p>
<ol start="3">
<li>inc() dec() 详解</li>
</ol>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        echo &quot;将id为1的email自增一次 +2&lt;br&gt;&quot;;
        echo &quot;自增前&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(1));
        Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;1&quot;)-&gt;inc(&quot;email&quot;,2)-&gt;update();
        echo &quot;自增后&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(1));


        echo &quot;将id为1的email自减一次 -1&lt;br&gt;&quot;;
        Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;1&quot;)-&gt;dec(&quot;email&quot;,1)-&gt;update();
        echo &quot;自减后&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(1));
        
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561184573189.png" alt=""></p>
<p>4.删<br>
delete()  影响数据的条数，没有删除返回 0<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037536">TP6 删除数据官方文档</a></p>
<blockquote>
<p>注意：慎用。不存在删库跑路说法<br>
代码就免了🤣🤣🤣<br>
一切数据均有其存在的价值</p>
</blockquote>
<p>5.调试<br>
fetchSql() 直接返回当前查询构造器组合语句，需与select() 配合使用<br>
buildSql()  把当前查询构造器组合语句作为子查询返回，两边带有 <strong>(</strong> 查询语句 <strong>)</strong> ，不需要配合select()<br>
这两种方法，均不会执行SQL语句</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        $where = [
            [&quot;nickname&quot;,&quot;=&quot;,&quot;Snail&quot;],
            [&quot;nickname&quot;,&quot;=&quot;,&quot;Cry&quot;]
        ];
        dump(Db::name(&quot;tp&quot;)-&gt;whereOr($where)-&gt;buildSql());
        dump(Db::name(&quot;tp&quot;)-&gt;whereOr($where)-&gt;fetchSql()-&gt;select());
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561254467131.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」文件下载类与对象注入]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-4</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-4">
        </link>
        <updated>2019-06-20T06:26:14.000Z</updated>
        <summary type="html"><![CDATA[<p>文件下载<br>
对象注入</p>
]]></summary>
        <content type="html"><![CDATA[<p>文件下载<br>
对象注入</p>
<!-- more -->
<h3 id="tp-文件下载">TP 文件下载</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037529">TP6 官方文件下载文档</a></p>
<p>1.下载服务器存在文件</p>
<pre><code>&lt;?php
namespace app\index\controller;

use think\response\File;

class Down
{
    public function index(){
        return &quot;这是下载前置页面，下载方法是 down ，为了有页面展示 所有就有了这个方法。&lt;br&gt;
                &lt;img src='../../static/image/acg.gy_50.jpg' width='500px'&gt;&lt;hr&gt;
                &lt;a href='dome'&gt;点击下载壁纸&lt;/a&gt;&lt;br&gt;&quot;;
    }

    public function dome(){
        //TP 的下载方法必须 存在实体文件，如果没有将会报错。
        $file = new File('../public/static/image/acg.gy_50.jpg');
        //设置下载文件名，自动识别后缀，无需设置。
        //return $file-&gt;name(&quot;壁纸&quot;);
        // 使用助手函数和上面的下载文件名是一样的效果
        //return download('../public/static/image/acg.gy_50.jpg', '壁纸');
        // 设置300秒有效期
        return download('../public/static/image/acg.gy_50.jpg', '壁纸')-&gt;expire(300);
    }
}
</code></pre>
<p>下载前置页面<br>
<img src="https://UserNameZjw.github.io/post-images/1561014219005.png" alt=""><br>
点击下载后<br>
<img src="https://UserNameZjw.github.io/post-images/1561014321900.png" alt=""></p>
<p>2.下载不存在的文本<br>
需要申明一下 isContent(true)</p>
<pre><code>&lt;?php
namespace app\index\controller;

use think\response\File;

class Down
{
    public function index(){
        return &quot;这是下载前置页面，下载方法是 down ，为了有页面展示 所有就有了这个方法。&lt;br&gt;
                &lt;img src='../../static/image/acg.gy_50.jpg' width='500px'&gt;&lt;hr&gt;
                &lt;a href='dome'&gt;点击下载壁纸&lt;/a&gt;&lt;br&gt;&quot;;
    }

    public function dome(){
        //如果你仅仅是想下载一些写入内容的文档，需要告诉TP 这是可下载文件。
        $file = new File('这是内容，如果想下载我，需要用到 isContent(true) ');
        return $file-&gt;name(&quot;测试文档.txt&quot;)-&gt;isContent(true);
    }
}
</code></pre>
<p>下载结果 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561015047885.png" alt=""></p>
<h3 id="请求对象的注入与调用">请求对象的注入与调用</h3>
<p>1.构造方法注入<br>
是指没有继承 BaseController 基类情况下使用<br>
如果继承了 BaseController 基类，直接使用同样的调用方法即可，不用再注入</p>
<pre><code>&lt;?php
namespace app\index\controller;

use think\Request;

class Down
{
    protected $request;

    public function __construct(Request $request)
    {
        $this-&gt;request = $request;
    }

    public function index(){
        //利用 get() 方法 测试是否注入成功
        //注意，我的服务器因为是 Nginx 所以做了URL 重写，
        //重写的时候 会把路径也作为GET变量传过来。所以打印值会多一个当前路径
        dump($this-&gt;request-&gt;get());

        //利用 post() 方法 测试是否注入成功
        echo &quot;&lt;hr&gt;&quot;;
        dump($this-&gt;request-&gt;post(['name'=&gt;'Cry']));

    }
}
</code></pre>
<p>2.操作方法注入<br>
不管有没有继承 BaseController 基类，都可以使用此方式</p>
<pre><code>&lt;?php
namespace app\index\controller;

use think\Request;

class Down
{

    public function index(Request $request){
        //利用 get() 方法 测试是否注入成功
        //注意，我的服务器因为是 Nginx 所以做了URL 重写，
        //重写的时候 会把路径也作为GET变量传过来。所以打印值会多一个当前路径
        dump($request-&gt;get());

        //利用 post() 方法 测试是否注入成功
        echo &quot;&lt;hr&gt;&quot;;
        dump($request-&gt;post(['name'=&gt;'Cry']));

    }
}
</code></pre>
<p>3.静态调用<br>
静态调用是利用TP6 的 facade 机制来静态请求的，use 的时候需要注意路径<br>
需要<strong>手动</strong> use  think\facade\Request;<br>
为什么需要注意？因为现阶段的 「编辑软件」 不会自动补全facade 的 use 路径  👻👻👻</p>
<pre><code>&lt;?php
namespace app\index\controller;

use \think\facade\Request;

class Down
{
    public function index(){
        //利用 get() 方法 测试是否注入成功
        //注意，我的服务器因为是 Nginx 所以做了URL 重写，
        //重写的时候 会把路径也作为GET变量传过来。所以打印值会多一个当前路径
        dump(Request::get());

        //利用 post() 方法 测试是否注入成功
        echo &quot;&lt;hr&gt;&quot;;
        dump(Request::post(['name'=&gt;'Cry']));
    }
}
</code></pre>
<p>4.助手函数<br>
TP6 一直为用户封装了很多助手函数，基本涵盖了常用的所有需求<br>
也就是说，TP6不辞辛苦的把每一个人的写法，都尽量兼容😂😂<br>
无需注入，无需继承 BaseController ，任何额外操作都不需要😂😂<br>
<strong>但是官方就是不优先推荐</strong> 😂😂😂<br>
其实里面有的也是 facade</p>
<pre><code>&lt;?php
namespace app\index\controller;

class Down
{
    public function index(){
        //利用 get() 方法 测试是否注入成功
        //注意，我的服务器因为是 Nginx 所以做了URL 重写，
        //重写的时候 会把路径也作为GET变量传过来。所以打印值会多一个当前路径
        dump(request()-&gt;get());

        //利用 post() 方法 测试是否注入成功
        echo &quot;&lt;hr&gt;&quot;;
        dump(request()-&gt;post(['name'=&gt;'Cry']));
    }
}
</code></pre>
<h3 id="伪静态">伪静态</h3>
<p>默认支持 .html 作为后缀</p>
<blockquote>
<p>修改方式：app\config\route.php 文件下 'url_html_suffix'       =&gt; 'html' ，如果想关闭，改为 false ，如果不设置，则默认任何后缀都可访问。<br>
如果想支持多后缀 'url_html_suffix'       =&gt; 'html|xml'</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」控制器验证与响应]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-3</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-3">
        </link>
        <updated>2019-06-16T09:50:37.000Z</updated>
        <summary type="html"><![CDATA[<p>控制器验证<br>
响应</p>
]]></summary>
        <content type="html"><![CDATA[<p>控制器验证<br>
响应</p>
<!-- more -->
<h3 id="controller-基类继承引用">Controller 基类继承引用</h3>
<p>通过继承 BaseController 基类，注入 app 以及 request<br>
本文仅举两个浅显的调用例子<br>
1.获取当前操作名  $action = $this-&gt;request-&gt;action();<br>
2.获取当前应用基础目录  $path = $this-&gt;app-&gt;getBasePath();<br>
<img src="https://UserNameZjw.github.io/post-images/1560679805511.png" alt=""><br>
简易代码 ↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;

class Index extends BaseController
{
    public function index()
    {
        //获取当前操作名
        echo $action = $this-&gt;request-&gt;action();
        echo '&lt;br&gt;获取当前操作名代码 ：$action = $this-&gt;request-&gt;action();&lt;br&gt; ';
        // 获取当前应用基础目录
        echo $path = $this-&gt;app-&gt;getBasePath();
        echo '&lt;br&gt;获取当前应用基础目录 ：$path = $this-&gt;app-&gt;getBasePath();&lt;br&gt; ';
        echo &quot;以上两个调用 request app 均通过基类 BaseController.php 注入&lt;br&gt;&quot;;
        echo &quot;只需继承 BaseController 类即可调用&quot;;
    }
}
</code></pre>
<p>注意：<br>
如果你是多应用模式，可以在 应用目录下同样创建一个 BaseController.php 基类文件<br>
ThinkPHP 6 在寻址的时候，优先就近原则。</p>
<h3 id="控制器验证">控制器验证</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037629">TP6 官方内置规则</a><br>
1.通过引用 validate 函数直接在控制器中使用<br>
Validate(规则,返回提示)-&gt;check(数据)<br>
这个简单，就不做过多介绍</p>
<pre><code>&lt;?php
namespace app\index\controller;

class Validate
{ 
    public function index ()
    {
        //定义验证规则
        $rule = [
            'name' =&gt; &quot;require|max:10&quot;,
            'email' =&gt; &quot;email&quot;
        ];

        // 定义错误返回信息

        $message = [
            &quot;name&quot; =&gt; [&quot;require&quot; =&gt; '名称不能为空','max' =&gt; '名称最大长度为10'],
            'email' =&gt; '邮箱格式错误'
        ];

        // 定义模拟数据
        $data = [
            'name' =&gt; 'Cry',
            'email' =&gt; 'snail@qq.com'
        ];

        // 验证规则
        // Validate(规则,返回提示)-&gt;check(数据)
        $result = Validate($rule,$message)-&gt;check($data);

        if(!$result){
            // 获取报错数据
            return Validate()-&gt;getError();
        }else{
            return '验证通过';
        }
    }
}
</code></pre>
<p>2.通过引用 validate 对象直接在控制器中使用<br>
继承基类 BaseController 类<br>
$this-&gt;validate(数据,验证规则,返回提示);</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;

class Validate extends BaseController
{ 
    public function index ()
    {
        //定义验证规则
        $rule = [
            'name' =&gt; &quot;require|max:10&quot;,
            'email' =&gt; &quot;email&quot;
        ];

        // 定义错误返回信息

        $message = [
            &quot;name&quot; =&gt; [&quot;require&quot; =&gt; '名称不能为空','max' =&gt; '名称最大长度为10'],
            'email' =&gt; '邮箱格式错误'
        ];

        // 定义模拟数据
        $data = [
            'name' =&gt; 'Cry',
            'email' =&gt; 'snail@qq.com'
        ];

        // 验证规则
        $result = $this-&gt;validate($data,$rule,$message);

        if(!$result){
            // 获取报错数据
            return Validate()-&gt;getError();
        }else{
            return '验证通过';
        }
    }
}
</code></pre>
<p>3.自定义验证规则<br>
验证下图要求(均使用 ThinkPHP6 内置规则)<br>
<img src="https://UserNameZjw.github.io/post-images/1560694503550.png" alt=""><br>
1.需要额外创建一个验证文件</p>
<blockquote>
<p>在 app 目录下创建 validate 文件夹，然后创建 User.php 文件作为自定义规则文件。</p>
</blockquote>
<p>目录：app\validate\User .php 代码如下 ↓<br>
注意代码格式，不需要创建方法，直接写验证规则和验证返回即可<br>
用 protected 声明<br>
rule 验证变量，message 返回变量</p>
<pre><code>&lt;?php
namespace app\validate;

use think\Validate;

class User extends Validate
{
    protected $rule = [
        'user_name' =&gt; 'require|chsAlphaNum|length:6,10',
        'password' =&gt; 'require|alphaNum|length:6,10',
        'email' =&gt; 'email',
        'mobile' =&gt; 'require|mobile|number|length:11'
    ];

    protected $message = [
        'user_name' =&gt; ['require' =&gt; '用户名不能为空','chsAlphaNum' =&gt; '用户名必须为字母和数字或汉字','length' =&gt; '用户名长度应在6至10位'],
        'password' =&gt; ['require' =&gt; '密码不能为空','alphaNum' =&gt; '密码必须为数字和字母组合','length' =&gt; '密码长度应在6至10位'],
        'email' =&gt; ['email' =&gt; '邮箱格式有误'],
        'mobile' =&gt; ['require' =&gt; '手机不能为空','number' =&gt; '手机号必须为数字','length' =&gt; '手机号长度必须11位','mobile' =&gt; '不是可用手机号']
    ];
}
</code></pre>
<p>2.在 app\index\controller\Index.php 下调用<br>
引入 User.php ，具体代码如下 ↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\validate\User;

class Index extends BaseController
{
    public function index()
    {
        $data = [
            'user_name' =&gt; 'Cry666超帅的',
            'password' =&gt; '123456qwe',
            'email' =&gt; 'snail@qq.com',
            'mobile' =&gt; '13112121211'
        ];

        $result = Validate(User::class)-&gt;check($data);

        if(!$result){
            // 获取报错数据
            return Validate()-&gt;getError();
        }else{
            return '验证通过';
        }
    }
}
</code></pre>
<h3 id="响应">响应</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037526">TP6 官方响应输出</a><br>
除了路由，需要注意的可能就是重定向了</p>
<p>1.重定向<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037528">TP6 官方重定向</a><br>
只需要调用 redirect(URL) 助手函数 即可<br>
上一个官方例子代码，例子将直接跳转到TP 官网↓</p>
<pre><code>&lt;?php
namespace app\controller;

class Index
{
    public function hello()
    {
        return redirect('http://www.thinkphp.cn');
    }
}
</code></pre>
<p>个人例子<br>
app/index/controller/Index.php 代码↓</p>
<pre><code>    public function dome($name = 'Cry')
    {
        return &quot;hello ,&quot;. $name .&quot;! 这是重定向后的 dome 页面&quot;;
    }

    public function name()
    {
//      直接无传值定向
//      return redirect(&quot;index/index/dome&quot;);
        return redirect(&quot;dome&quot;);
    }
</code></pre>
<p>打开后页面显示结果 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560930051407.png" alt=""></p>
<p>2.重定向传值</p>
<pre><code>    public function dome($name = 'Cry')
    {
        return &quot;hello ,&quot;. $name .&quot;! 这是重定向后的 dome 页面&quot;;
    }

    public function name()
    {
//        直接传值定向
//        1.直接在上拼接
//        return redirect(&quot;index/index/dome?name=Snail&quot;);
//        或者用 TP 分隔符 / 进行传值
//        return redirect(&quot;index/index/dome/name/Snail&quot;);

//        2.使用 params 助手函数配合
//        return redirect('dome')-&gt;params(['name'=&gt;'Snail']);

//        3.直接传递数组，推荐
        return redirect('dome',['name'=&gt;'Snail']);
    }
</code></pre>
<p>访问结果↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560930782212.png" alt=""><br>
注意：同命名空间下，可以省略详细路径！</p>
<p>3.重定向利用 session 闪存数据<br>
闪存、回源，需要借助 session 实现，TP6默认不开启 session<br>
开启方法：把 app/middlware.php 下的 session 初始化注释删除即可 ↓</p>
<pre><code>&lt;?php

return [
    // 全局请求缓存
    // 'think\middleware\CheckRequestCache',
    // 多语言加载
    // 'think\middleware\LoadLangPack',
    // Session初始化
     'think\middleware\SessionInit',
    // 页面Trace调试
    // 'think\middleware\TraceDebug',
];
</code></pre>
<p>闪存数据需要借助 with(变量名,变量值) 方法，写入到 session 缓存 代码如下 ↓</p>
<pre><code>    public function dome()
    {
        //利用session 助手函数 调用
        $name = session('name');
        return &quot;hello ,&quot;. $name .&quot;! 这是重定向后的 dome 页面&quot;;
    }

    public function name()
    {
        return redirect('dome')-&gt;with(&quot;name&quot;,&quot;Snail&quot;);
    }
</code></pre>
<blockquote>
<p>注意事项：重定向目标页面如果手动刷新，将会丢失session 传递值。</p>
</blockquote>
<p>图一：<img src="https://UserNameZjw.github.io/post-images/1560932232698.png" alt=""><br>
图二：<img src="https://UserNameZjw.github.io/post-images/1560932251677.png" alt=""></p>
<p>重定向回源利用 remember() 方法记住重定向来源页</p>
<pre><code>//重定向指向
    public function dome()
    {
        //利用session 助手函数 调用
        $name = session('name');
        return &quot;hello ,&quot;. $name .'! 这是重定向后的 dome 页面&lt;br&gt;&lt;a href=&quot;/index/index/back&quot;&gt;点击回到来源地址&lt;/a&gt;';
    }

    //访问链接
    public function name()
    {
        // 判断session完成标记是否存在
        // 主要是用于回源完成后执行
        if (session('?back')) {
            // 删除session
            session('back', null);
            return '重定向完成，回到原点!';
        } else {
            //利用 remember 方法记住当前地址。
            return redirect('dome')-&gt;with(&quot;name&quot;,&quot;Snail&quot;)-&gt;remember();
        }

    }

    //设置标记中转方法
    public function back(){
        //设置判断变量 back
        session('back',true);
        //回到原址
        return redirect()-&gt;restore();
    }
</code></pre>
<p>具体结果图 ↓<br>
图一：<img src="https://UserNameZjw.github.io/post-images/1560933916857.png" alt=""><br>
图二：<img src="https://UserNameZjw.github.io/post-images/1560933935189.png" alt=""><br>
图三：<img src="https://UserNameZjw.github.io/post-images/1560933943252.png" alt=""></p>
<blockquote>
<p>注意：图三所描述的场景，刷新重定向「目标页」，会丢的不仅仅数据，还有回家的路。</p>
</blockquote>
]]></content>
    </entry>
</feed>