<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://UserNameZjw.github.io</id>
    <title>「谨言慎行」</title>
    <updated>2019-06-29T15:01:43.299Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://UserNameZjw.github.io"/>
    <link rel="self" href="https://UserNameZjw.github.io/atom.xml"/>
    <subtitle>一位年近三十的中年油腻肥胖老男人的中年危机</subtitle>
    <logo>https://UserNameZjw.github.io/images/avatar.png</logo>
    <icon>https://UserNameZjw.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 「谨言慎行」</rights>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」模型 增、删、改、查]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-7</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-7">
        </link>
        <updated>2019-06-27T03:05:14.000Z</updated>
        <summary type="html"><![CDATA[<p>模型的 增、删、改、查</p>
]]></summary>
        <content type="html"><![CDATA[<p>模型的 增、删、改、查</p>
<!-- more -->
<h3 id="定义">定义</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037580">TP6 模型定义官网文档</a><br>
app\index\controller\Index.php 代码</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $user = new Tp();
        $arr = $user-&gt;getId(2);
        dump($arr);
    }

}
</code></pre>
<p>app\index\model\Tp.php 代码</p>
<pre><code>&lt;?php

namespace app\index\model;

use think\Model;

class Tp extends Model
{
    public function getUser($where = null){
        $arr = $this-&gt;where( ($where = null) ? &quot; id &gt;0 &quot; : $where);
        return $arr;
    }

    public function getId($id){

        $this-&gt;model = $this-&gt;getUser();
        return $this-&gt;model-&gt;find($id)-&gt;toArray();
    }

}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561606176769.png" alt=""></p>
<blockquote>
<p>注意：</p>
<ol>
<li>模型定义，最好在各自的应用下的 model 文件夹下， 如 index 文件夹就是一个应用</li>
<li>模型其实就是 Db:: 类的一个增强，Db:: 类的所有语法，都可以在 model 使用</li>
<li>模型中返回的数据均是 「对象」 格式，调用元素需要用箭头指向 -&gt;</li>
<li>如果需要返回数组，可以在模型中，调用 toArray() 返回数组形式</li>
</ol>
</blockquote>
<h3 id="模型字段">模型字段</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037581">TP6 模型字段官方文档</a></p>
<blockquote>
<p>如有需求，自行参考</p>
</blockquote>
<h3 id="增">增</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037582">TP6 模型-&gt;新增 官方文档</a></p>
<ol>
<li>save()  单条插入数据，成功返回true</li>
<li>saveAll() 批量插入数据，成功返回数据集</li>
<li>静态调用 create() 成功返回对象数据<br>
save() 基础用法代码</li>
</ol>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $user = new Tp();
        $data = [
            &quot;nickname&quot; =&gt; &quot;modelSave&quot;,
            &quot;email&quot; =&gt; &quot;modelSave@qq.com&quot;,
            &quot;age&quot; =&gt; 18
        ];
        $back = $user-&gt;save($data);
        dump($back);
    }

}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561607584749.jpg" alt=""></p>
<p>save() 获取自增主键<br>
在我看来，这个真的繁琐<br>
如果仅仅是需要返回主键，可以直接用Db:: 写法调用 insertGetId()</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $user = new Tp();
        $user-&gt;nickname = &quot;modelSave&quot;;
        $user-&gt;email = &quot;modelSave@qq.com&quot;;
        $user-&gt;age = 19;
        $user-&gt;save();
        //打印对象 id 主键
        dump($user-&gt;id);
        //返回对象
        return $user;
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561609920487.jpg" alt=""></p>
<p>saveAll() 使用方法</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $tp = new Tp();
        $data =
            [
                [
                    &quot;nickname&quot; =&gt; &quot;modelSave1&quot;,
                    &quot;email&quot; =&gt; &quot;modelSave@qq.com1&quot;,
                    &quot;age&quot; =&gt; 11
                ],
                [
                    &quot;nickname&quot; =&gt; &quot;modelSave2&quot;,
                    &quot;email&quot; =&gt; &quot;modelSave@qq.com2&quot;,
                    &quot;age&quot; =&gt; 12
                ],
                [
                    &quot;nickname&quot; =&gt; &quot;modelSave3&quot;,
                    &quot;email&quot; =&gt; &quot;modelSave@qq.com3&quot;,
                    &quot;age&quot; =&gt; 13
                ],
            ];
        $back = $tp-&gt;saveAll($data);
        //返回对象
        return $back;
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561613350850.jpg" alt=""></p>
<p>静态调用 create()</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $data = [
            &quot;nickname&quot; =&gt; &quot;modelSave&quot;,
            &quot;email&quot; =&gt; &quot;modelSave@qq.com&quot;,
            &quot;age&quot; =&gt; 18
        ];
        //静态调用，编辑器不提示哦
        $tp = Tp::create($data);
        //返回对象
        return $tp;
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561612590741.jpg" alt=""></p>
<p>筛选插入</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $data = [
            &quot;nickname&quot; =&gt; &quot;筛选插入&quot;,
            &quot;email&quot; =&gt; &quot;不许插入&quot;
        ];
        $tp = Tp::create($data,[&quot;nickname&quot;]);
        dump($tp);
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561809721324.jpg" alt=""></p>
<blockquote>
<ol>
<li>关于自动筛选以及自动插入，都会有个操作时间，可以在 config/database/php 设置</li>
<li>默认配置 'auto_timestamp'  =&gt; true 意思是自动完成。如果需要特别指定，可以按照注释配置</li>
<li>create 第二个参数，数组形式，是允许插入的字段</li>
</ol>
</blockquote>
<p>总结：尽量用 create() 静态方式新增单条数据，批量插入选择 saveAll() ，除了 create() 自定筛选插入方式翻车以外，其他的插入方法，均自动完成筛选。</p>
<h3 id="改">改</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037583">TP6 模型-&gt; 更新 官方文档</a></p>
<ol>
<li>save() 使用方法自行领会，成功返回true</li>
<li>saveAll() 使用方法同save()，成功返回对象数据集</li>
<li>静态调用 update()  成功返回对象数据</li>
</ol>
<p>save() 与 saveAll() 不做详解 🤣🤣🤣</p>
<p>静态调用 update()</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        //如果变更数据中有主键，可以免写第二参数 $where 条件
        $data = [
            &quot;nickname&quot; =&gt; &quot;upName&quot;,
            &quot;email&quot; =&gt; &quot;upEmail&quot;,
            &quot;id&quot; =&gt; 26
        ];
        return Tp::update($data);
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561617295249.jpg" alt=""></p>
<p>筛选修改</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        $data = [
            &quot;nickname&quot; =&gt; &quot;筛选插入&quot;,
            &quot;email&quot; =&gt; &quot;不许插入&quot;
        ];
        $tp = Tp::update($data,[&quot;id&quot; =&gt; 26],[&quot;email&quot;]);
        return $tp;
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561812024566.jpg" alt=""></p>
<blockquote>
<p>注意：</p>
<ol>
<li>单条修改，依然推荐静态调用 update() ，多条推荐 saveAll()</li>
<li>如果修改数据中包含唯一主键，可以不传递条件参数</li>
<li>条件参数，数组形式 ['id' =&gt; 26]</li>
<li>筛选修改，第三个参数，数组形式，是允许的字段</li>
</ol>
</blockquote>
<h3 id="查">查</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037585">TP6 模型-&gt; 查询 官方文档</a></p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        //可以用 Db 类所有写法
        //静态查询
        echo &quot;查询单条 find() 默认条件查询是唯一主键 返回对象&lt;br&gt;
               用toArray() 转数组格式&quot;;
        dump(Tp::find(26)-&gt;toArray());
        //查询多条
        echo &quot;查询多条 select() 默认条件查询是唯一主键 返回对象&lt;br&gt;
               用toArray() 转数组格式&quot;;
        dump(Tp::select([23,24])-&gt;toArray());

        //查询单条
        echo &quot;查询单条 find() 默认条件查询是唯一主键 返回对象&lt;br&gt;
               用toArray() 转数组格式&quot;;
        $tp = new Tp();
        dump($tp-&gt;find(26)-&gt;toArray());

        echo &quot;查询单条 select() 默认条件查询是唯一主键 返回对象&lt;br&gt;
               用toArray() 转数组格式&quot;;
        dump($tp-&gt;select([23,24])-&gt;toArray());
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561619193582.jpg" alt=""></p>
<blockquote>
<p>注意：</p>
<ol>
<li>不管是在「控制器」还是在「模型」中，均支持 Db 类的所有写法</li>
<li>「控制器」推荐静态写法，如 Tp::where()-&gt;find()</li>
<li>「模型」推荐写法，如 $this-&gt;where()-&gt;find()</li>
</ol>
</blockquote>
<p>字段动态查询</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        //如果查询为空，不能接toArray()
        $tp = Tp::getByNickname(&quot;snail&quot;)-&gt;toArray();
        dump($tp);

        $tp = Tp::getByAge(&quot;12&quot;)-&gt;toArray();
        dump($tp);

        $tp = Tp::getByEmail(&quot;668346&quot;)-&gt;toArray();
        dump($tp);
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561818889487.jpg" alt=""></p>
<blockquote>
<p>注意：</p>
<ol>
<li>getBy 接你的字段，注意驼峰写法</li>
<li>例：查询 nickname 字段 需要写成 getByNickname</li>
<li>比对使用的是 = 运算符</li>
<li>返回结果都是单条查询</li>
</ol>
</blockquote>
<h3 id="删">删</h3>
<p>delete() 成功返回 true/false<br>
静态调用 destroy()<br>
闭包删除</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\index\model\Tp;

class Index extends BaseController
{
    public function index()
    {
        //三种删除方法
        // 动态 delete()
        $tp = new Tp();
        $back = $tp-&gt;where(&quot;id&quot;,&quot;=&quot;,18)-&gt;delete();

        //静态调用
        $del = Tp::destroy([26,27]);
        echo $del;

        //闭包删除
        echo Tp::destroy(function ($query){
            $query-&gt;where(&quot;id&quot;,&quot;&gt;&quot;,&quot;20&quot;);
        });
    }
}
</code></pre>
<blockquote>
<p>注意：</p>
<ol>
<li>推荐闭包删除</li>
<li>单独使用 destroy() 删除，传入主键ID ，数组形式</li>
</ol>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」数据库链式操作]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-6</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-6">
        </link>
        <updated>2019-06-23T02:04:17.000Z</updated>
        <summary type="html"><![CDATA[<p>原生查询  聚合查询<br>
高级查询  视图查询<br>
子查询</p>
]]></summary>
        <content type="html"><![CDATA[<p>原生查询  聚合查询<br>
高级查询  视图查询<br>
子查询</p>
<!-- more -->
<h3 id="原生查询">原生查询</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037570">TP6 原生查询官方文档</a><br>
原生查询可以说是让人又爱又恨<br>
简单的语句用不到，复杂的语句用TP6 的构造器又更麻烦，导致无法彻底抛弃原生<br>
query() 可执行任何原生语句<br>
execute() 仅用于更新以及写入数据，不可做其他用处</p>
<blockquote>
<p>因为execute() 在SQL语句无错误的情况下，仅返回受影响条数，否则返回false</p>
</blockquote>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //下面用原生查询 think_tp 表中的所有数据
        $sql = &quot; SELECT * FROM think_tp &quot;;
        dump(Db::query($sql));

        //用execute() 执行查询语句
        dump(Db::execute($sql));
    }
}
</code></pre>
<p>图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561256581994.png" alt=""></p>
<h3 id="聚合查询">聚合查询</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037564">TP6 聚合查询官方文档</a><br>
在查询中，经常用到一些需要统计数据<br>
count()	统计数量，参数是要统计的字段名（可选）<br>
max()	获取最大值，参数是要统计的字段名（必须）<br>
min()	获取最小值，参数是要统计的字段名（必须）<br>
avg()	获取平均值，参数是要统计的字段名（必须）<br>
sum()	获取总和，参数是要统计的字段名（必须）</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //查询 think_tp 表数据总条数
        echo &quot;count() 查询总条数&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;count());

        echo &quot;查询 age 最大值&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;max(&quot;age&quot;));

        echo &quot;查询 age 最小值&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;min(&quot;age&quot;));

        echo &quot;查询 age 平均值&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;avg(&quot;age&quot;));

        echo &quot;查询 age 总和&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;sum(&quot;age&quot;));
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561257598179.jpg" alt=""></p>
<blockquote>
<p>注意：max() min() 支持第二个参数，是否开启强制转换，因为有时候，查询的字段并不都是数值<br>
第二值默认为 true ，可传入 false 关闭强制转换</p>
</blockquote>
<h3 id="高级查询">高级查询</h3>
<p>参考链接：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037566">TP6 高级查询官方文档</a></p>
<p>1.快捷查询<br>
快捷查询方式是一种多字段相同查询条件的简化写法<br>
| 代表 or ，&amp; 代表 and</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //快捷查询 | 代表or ，&amp; 代表 and
        $back = Db::name(&quot;tp&quot;)
            -&gt;where(&quot;id|email&quot;,&quot;like&quot;,&quot;12%&quot;)
            -&gt;where(&quot;id&amp;age&quot;,&quot;&gt;&quot;,&quot;9&quot;)
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where(&quot;id|emali&quot;,&quot;like&quot;,&quot;12%&quot;)
            -&gt;where(&quot;id&amp;age&quot;,&quot;&gt;&quot;,&quot;9&quot;)
            -&gt;fetchSql()
            -&gt;select();

        dump($back);

    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561359487306.jpg" alt=""></p>
<p>2.批量（字段）查询</p>
<p>基础用法</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        $back = Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;&gt;&quot;,&quot;4&quot;]
            ])
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;&gt;&quot;,&quot;4&quot;]
            ])
            -&gt;fetchSql()
            -&gt;select();

        dump($back);

    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561360542975.jpg" alt=""></p>
<p>exp BUG疑问<br>
此BUG（暂做BUG看）告诉我们，字段与字段比对，必须exp<br>
whereExp()</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        $back = Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;&gt;&quot;,&quot;age&quot;]
            ])
            -&gt;select();
        echo Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;&gt;&quot;,&quot;age&quot;]
            ])
            -&gt;fetchSql()
            -&gt;select();
        
        $back2 = Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;exp&quot;,Db::raw(&quot;&gt;age&quot;)]
            ])
            -&gt;select();
        echo &quot;&lt;br&gt;&quot;.Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;email&quot;,&quot;like&quot;,&quot;123%&quot;],
                [&quot;id&quot;,&quot;exp&quot;,Db::raw(&quot;&gt;age&quot;)]
            ])
            -&gt;fetchSql()
            -&gt;select();

        dump($back);
        dump($back2);
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561363274133.jpg" alt=""></p>
<blockquote>
<p>注意：exp 必须配合 Db::raw() 使用</p>
</blockquote>
<p>3.数组组合方式，直接变量组合</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //数组查询方式，变量直接组合
        $email = &quot;Sn&quot;;
        $nick = &quot;s&quot;;
        $back = Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;],
                [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
            ])
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where([
                [&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;],
                [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
            ])
            -&gt;fetchSql()
            -&gt;select();
        dump($back);
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561366312794.jpg" alt=""></p>
<p>4.闭包查询</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //闭包查询
        $email = &quot;Sn&quot;;
        $nick = &quot;s&quot;;
        $back = Db::name(&quot;tp&quot;)
            -&gt;where(function ($query) use ($email,$nick){
                $query-&gt;where([
                        [&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;],
                        [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
                ]);
            })
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where(function ($query) use ($email,$nick){
                $query-&gt;where([
                    [&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;],
                    [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
                ]);
            })
            -&gt;fetchSql()
            -&gt;select();
        dump($back);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561367263604.jpg" alt=""></p>
<p>5.混合查询<br>
只要符合语法规则的写法，都能同时一起写</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //混合查询
        $email = &quot;Sn&quot;;
        $nick = &quot;s&quot;;
        $back = Db::name(&quot;tp&quot;)
            //变量组合写法
            -&gt;where(&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;)
            //闭包写法
            -&gt;where(function ($query) use ($email){
                $query-&gt;where([
                    [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
                ])
                //字符串写法
                -&gt;whereOr(&quot;age &gt; 0 and 1=1&quot;);
            })
            //快捷写法
            -&gt;where(&quot;id|age&quot;,&quot;&gt;&quot;,0)
            //字符串条件查询，绑定写法
            -&gt;whereRaw(&quot;email like :email&quot;,[&quot;email&quot; =&gt; $email.&quot;%&quot;])
            -&gt;select();

        echo Db::name(&quot;tp&quot;)
            -&gt;where(&quot;nickname&quot;,&quot;like&quot;,$nick.&quot;%&quot;)
            -&gt;where(function ($query) use ($email){
                $query-&gt;where([
                    [&quot;email&quot;,&quot;like&quot;,$email.&quot;%&quot;]
                ])
                    -&gt;whereOr(&quot;age &gt; 0 and 1=1&quot;);
            })
            -&gt;where(&quot;id|age&quot;,&quot;&gt;&quot;,0)
            -&gt;whereRaw(&quot;email like :email&quot;,[&quot;email&quot; =&gt; $email.&quot;%&quot;])
            -&gt;fetchSql()
            -&gt;select();
        dump($back);
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561379697950.jpg" alt=""></p>
<p>6.更多快捷方法<br>
<img src="https://UserNameZjw.github.io/post-images/1561379891833.jpg" alt=""></p>
<h3 id="视图查询">视图查询</h3>
<p>多表查询，join 的推荐替代方法</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        $back = Db::view(&quot;tp a&quot;,&quot;id,nickname&quot;)
            -&gt;view(&quot;tp1 b&quot;,&quot;id,email,nickname&quot;,&quot;a.id = b.id&quot;,&quot;LEFT&quot;)
            -&gt;where(&quot;a.id&quot;,&quot;&gt;&quot;,&quot;5&quot;)
            -&gt;select();

        echo Db::view(&quot;tp a&quot;,&quot;id,nickname&quot;)
            -&gt;view(&quot;tp1 b&quot;,&quot;id,email,nickname&quot;,&quot;a.id = b.id&quot;,&quot;LEFT&quot;)
            -&gt;where(&quot;a.id&quot;,&quot;&gt;&quot;,&quot;5&quot;)
            -&gt;fetchSql()
            -&gt;select();

        dump($back);
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561382496575.jpg" alt=""></p>
<blockquote>
<p>注意：如果使用数组形式设置别名，如果表名有前缀，需要写前缀<br>
如 think_ 为表前缀，需写成 ['think_tp' =&gt; 'a'] 不然报错</p>
</blockquote>
<h3 id="子查询">子查询</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037569">TP6 子查询官方文档</a></p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //其实子查询，就是利用TP 构造器返回 sql 语句 而不执行
        echo &quot;fetchSql() 可以用在任何sql构造中，不仅限于 select() &quot;;
        dump(
            Db::name(&quot;tp&quot;)
                -&gt;where(&quot;id&quot;,&quot;&gt;&quot;,&quot;5&quot;)
                -&gt;fetchSql()
                -&gt;select()
        );

        echo &quot;buildSql() 一般纯用于构造sql 返回，后续不能跟随 select() update() 之类&lt;br&gt;
                并且可以返回到变量中，作为复用，此方法会把 sql 语句用（）包裹起来&quot;;
        dump(
            Db::name(&quot;tp&quot;)
                -&gt;where(&quot;id&quot;,&quot;&gt;&quot;,&quot;5&quot;)
                -&gt;buildSql()
        );

        echo &quot;利用闭包特性，会在sql 构造中，把闭包内容用 （）包裹的特性&quot;;
        dump(
            Db::name(&quot;tp&quot;)
                -&gt;where(&quot;id&quot;,&quot;in&quot;,function ($query){
                    $query-&gt;name(&quot;tp1&quot;)
                    -&gt;where(&quot;id&quot;,&quot;&gt;&quot;,5)
                    -&gt;field(&quot;id&quot;);
                })
                -&gt;fetchSql()
                -&gt;select()
        );
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561384804354.jpg" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」数据库连接与操作]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-5</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-5">
        </link>
        <updated>2019-06-21T07:23:14.000Z</updated>
        <summary type="html"><![CDATA[<p>数据库链接配置<br>
数据库操作</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据库链接配置<br>
数据库操作</p>
<!-- more -->
<h3 id="连接数据库">连接数据库</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037531">TP6 连接数据库官方文档</a><br>
1.单链接配置
修改 app\database.php 文件  由于配置项太多，仅拿官方例子展示<br>
配置上每一项都有注释说明，需要注意的就是文件路径而已🤣🤣</p>
<pre><code>return [
    'default'    =&gt;    'mysql',
    'connections'    =&gt;    [
        'mysql'    =&gt;    [
            // 数据库类型
            'type'        =&gt; 'mysql',
            // 服务器地址
            'hostname'    =&gt; '127.0.0.1',
            // 数据库名
            'database'    =&gt; 'thinkphp',
            // 数据库用户名
            'username'    =&gt; 'root',
            // 数据库密码
            'password'    =&gt; '',
            // 数据库连接端口
            'hostport'    =&gt; '',
            // 数据库连接参数
            'params'      =&gt; [],
            // 数据库编码默认采用utf8
            'charset'     =&gt; 'utf8',
            // 数据库表前缀
            'prefix'      =&gt; 'think_',
        ],
    ],
];
</code></pre>
<p>2.多连接配置<br>
篇幅太长就直接截图说明<br>
<img src="https://UserNameZjw.github.io/post-images/1561107241843.png" alt=""><br>
值得一提的是，TP6 引入了 env 环境变量机制，并且环境变量机制优先于 database.php 配置<br>
关于 evn ，我在之前的 <a href="https://usernamezjw.github.io/post/thinkphp-6-2/">部分配置与控制器</a> 中有说明，找到开启开发调试模式，就能看到。
.env 代码 ↓</p>
<pre><code>APP_DEBUG = true

[APP]
DEFAULT_TIMEZONE = Asia/Shanghai

[DATABASE]
TYPE = mysql
HOSTNAME = 127.0.0.1
DATABASE = tp6
USERNAME = root
PASSWORD =
HOSTPORT = 3306
CHARSET = utf8
DEBUG = true

[LANG]
default_lang = zh-cn
</code></pre>
<blockquote>
<p>注意：.env 文件里的设置，与 database.php 的文件呼应关系如下<br>
如果是多连接配置<br>
请保持两个文件内相呼应一致<br>
即，.env 有几个配置，database.php 就有几个配置<br>
.env 配置 同理于 database.php ，只需要复制相同部分，然后在 database.php 修改标识部分即可
<img src="https://UserNameZjw.github.io/post-images/1561122830109.png" alt=""></p>
</blockquote>
<p>database.php文件 <img src="https://UserNameZjw.github.io/post-images/1561122441280.png" alt=""><br>
.env 文件 <img src="https://UserNameZjw.github.io/post-images/1561122448342.png" alt=""></p>
<p>在数据操作时，可以通过 connect() 方法指定需要使用的数据库连接配置</p>
<h3 id="数据库操作">数据库操作</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037620">TP6 SQL调试官方文档</a><br>
另，可以查询 app/vendor/topthink/framework/src/think/db/BaseQuery.php 文件，开启新世界</p>
<p>1.增<br>
save() 单条新增，成功返回新增条数<br>
insert()  单条新增，成功返回新增条数<br>
insertAll()  多条新增，成功返回新增条数<br>
insertGetId()  单条新增，成功返回新增数据自增ID<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037534">TP6 添加数据官方文档</a></p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
//        单条数据插入，save() insert() 两种方法等同效果。
//        使用 save() 新增数据
//        $data = ['nickname' =&gt; 'save','email' =&gt; '123@snail.com'];
//        $ins = Db::name('tp')-&gt;save($data);

//        使用insert()新增数据
//        $data = ['nickname' =&gt; 'insert','email' =&gt; '123@snail.com'];
//        $ins = Db::name('tp')-&gt;insert($data);
//
//        多条数据插入 insertAll()
//        数据组合为二维数组
//        $data =
//            [
//                ['nickname' =&gt; 'insertAll1','email' =&gt; '123@snail.com'],
//                ['nickname' =&gt; 'insertAll2','email' =&gt; '123@snail.com']
//            ];
        //单条数据插入，但是返回插入数据自增ID。
        $data = ['nickname' =&gt; 'insertGetId','email' =&gt; '123@snail.com'];
        $ins = Db::name('tp')-&gt;insertGetId($data);

        if($ins){
           return &quot;插入成功&quot;;
        }else{
            return &quot;插入失败&quot;;
        }
    }
}
</code></pre>
<p>结果图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561125241203.png" alt=""></p>
<p>2.查<br>
find()  单条查询，成功返回一维数组<br>
select() 多条查询，成功返回二维数组<br>
value()  查询某个字段的值，成功返回字符串<br>
column()  查询某一列的值，成功返回二维数组<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037533">TP6 查询数据官方文档</a></p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
//        查询ID为5的单条数据，返回一维数组
//        $data = Db::name(&quot;tp&quot;)-&gt;find(&quot;5&quot;);

//        查询数据库内所有数据，返回二维数组
//        $data = Db::name(&quot;tp&quot;)-&gt;select();

//        查询单条某个字段的值，返回字符串
//        $data = Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;5&quot;)-&gt;value(&quot;nickname&quot;);

//        查询多条数据，返回二维数组
        $data = Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;&gt;&quot;,&quot;5&quot;)-&gt;column(&quot;*&quot;,&quot;id&quot;);
        dump($data);
    }
}
</code></pre>
<p>3.改<br>
save()  单条修改，成功返回条数<br>
update()  单/多条修改，成功返回条数<br>
inc() 自增<br>
dec()  自减<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037535">TP6 更新数据官方文档</a></p>
<ol>
<li>save() 使用详解</li>
</ol>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //配置save() 修改数据，需要指定包含主键 id 才会修改数据，否则将会新增数据
        $data = [&quot;id&quot;=&gt;&quot;7&quot;,&quot;nickname&quot; =&gt; &quot;saveUp&quot;];

        //打印修改前数据
        echo &quot;修改前&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(&quot;7&quot;));
        
        //修改数据
        Db::name(&quot;tp&quot;)-&gt;save($data);

        //打印修改后数据
        echo &quot;修改后&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(&quot;7&quot;));
    }
}
</code></pre>
<p>图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561128218256.png" alt=""><br>
2. update() 详解</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        //组合数据形式，分别是update()使用，以及data()使用
        $updateUp = [&quot;nickname&quot; =&gt; 'updateUp'];
        $dataUp = [&quot;nickname&quot; =&gt; 'dataUp'];

        //打印修改前数据
        echo &quot;打印修改前数据&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(7));

        //使用data()传值方式修改
        Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;7&quot;)-&gt;data($dataUp)-&gt;update();

        //打印data()传值修改后数据
        echo &quot;打印data()传值修改后数据&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(7));

        //同时使用data() 和 update()传值方式，update() 法优先级于 data() 传值
        Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;7&quot;)-&gt;data($dataUp)-&gt;update($updateUp);

        //打印update()传值修改后数据
        echo &quot;打印update()传值修改后数据,如果update()不优先级，数据应该无变化&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(7));
    }
}
</code></pre>
<p>图 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561129037853.png" alt=""></p>
<ol start="3">
<li>inc() dec() 详解</li>
</ol>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        echo &quot;将id为1的email自增一次 +2&lt;br&gt;&quot;;
        echo &quot;自增前&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(1));
        Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;1&quot;)-&gt;inc(&quot;email&quot;,2)-&gt;update();
        echo &quot;自增后&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(1));


        echo &quot;将id为1的email自减一次 -1&lt;br&gt;&quot;;
        Db::name(&quot;tp&quot;)-&gt;where(&quot;id&quot;,&quot;1&quot;)-&gt;dec(&quot;email&quot;,1)-&gt;update();
        echo &quot;自减后&quot;;
        dump(Db::name(&quot;tp&quot;)-&gt;find(1));
        
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561184573189.png" alt=""></p>
<p>4.删<br>
delete()  影响数据的条数，没有删除返回 0<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037536">TP6 删除数据官方文档</a></p>
<blockquote>
<p>注意：慎用。不存在删库跑路说法<br>
代码就免了🤣🤣🤣<br>
一切数据均有其存在的价值</p>
</blockquote>
<p>5.调试<br>
fetchSql() 直接返回当前查询构造器组合语句，需与select() 配合使用<br>
buildSql()  把当前查询构造器组合语句作为子查询返回，两边带有 <strong>(</strong> 查询语句 <strong>)</strong> ，不需要配合select()<br>
这两种方法，均不会执行SQL语句</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use think\facade\Db;

class Index extends BaseController
{
    public function index()
    {
        $where = [
            [&quot;nickname&quot;,&quot;=&quot;,&quot;Snail&quot;],
            [&quot;nickname&quot;,&quot;=&quot;,&quot;Cry&quot;]
        ];
        dump(Db::name(&quot;tp&quot;)-&gt;whereOr($where)-&gt;buildSql());
        dump(Db::name(&quot;tp&quot;)-&gt;whereOr($where)-&gt;fetchSql()-&gt;select());
    }
}
</code></pre>
<p>图 ↓
<img src="https://UserNameZjw.github.io/post-images/1561254467131.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」文件下载类与对象注入]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-4</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-4">
        </link>
        <updated>2019-06-20T06:26:14.000Z</updated>
        <summary type="html"><![CDATA[<p>文件下载<br>
对象注入</p>
]]></summary>
        <content type="html"><![CDATA[<p>文件下载<br>
对象注入</p>
<!-- more -->
<h3 id="tp-文件下载">TP 文件下载</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037529">TP6 官方文件下载文档</a></p>
<p>1.下载服务器存在文件</p>
<pre><code>&lt;?php
namespace app\index\controller;

use think\response\File;

class Down
{
    public function index(){
        return &quot;这是下载前置页面，下载方法是 down ，为了有页面展示 所有就有了这个方法。&lt;br&gt;
                &lt;img src='../../static/image/acg.gy_50.jpg' width='500px'&gt;&lt;hr&gt;
                &lt;a href='dome'&gt;点击下载壁纸&lt;/a&gt;&lt;br&gt;&quot;;
    }

    public function dome(){
        //TP 的下载方法必须 存在实体文件，如果没有将会报错。
        $file = new File('../public/static/image/acg.gy_50.jpg');
        //设置下载文件名，自动识别后缀，无需设置。
        //return $file-&gt;name(&quot;壁纸&quot;);
        // 使用助手函数和上面的下载文件名是一样的效果
        //return download('../public/static/image/acg.gy_50.jpg', '壁纸');
        // 设置300秒有效期
        return download('../public/static/image/acg.gy_50.jpg', '壁纸')-&gt;expire(300);
    }
}
</code></pre>
<p>下载前置页面<br>
<img src="https://UserNameZjw.github.io/post-images/1561014219005.png" alt=""><br>
点击下载后<br>
<img src="https://UserNameZjw.github.io/post-images/1561014321900.png" alt=""></p>
<p>2.下载不存在的文本<br>
需要申明一下 isContent(true)</p>
<pre><code>&lt;?php
namespace app\index\controller;

use think\response\File;

class Down
{
    public function index(){
        return &quot;这是下载前置页面，下载方法是 down ，为了有页面展示 所有就有了这个方法。&lt;br&gt;
                &lt;img src='../../static/image/acg.gy_50.jpg' width='500px'&gt;&lt;hr&gt;
                &lt;a href='dome'&gt;点击下载壁纸&lt;/a&gt;&lt;br&gt;&quot;;
    }

    public function dome(){
        //如果你仅仅是想下载一些写入内容的文档，需要告诉TP 这是可下载文件。
        $file = new File('这是内容，如果想下载我，需要用到 isContent(true) ');
        return $file-&gt;name(&quot;测试文档.txt&quot;)-&gt;isContent(true);
    }
}
</code></pre>
<p>下载结果 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1561015047885.png" alt=""></p>
<h3 id="请求对象的注入与调用">请求对象的注入与调用</h3>
<p>1.构造方法注入<br>
是指没有继承 BaseController 基类情况下使用<br>
如果继承了 BaseController 基类，直接使用同样的调用方法即可，不用再注入</p>
<pre><code>&lt;?php
namespace app\index\controller;

use think\Request;

class Down
{
    protected $request;

    public function __construct(Request $request)
    {
        $this-&gt;request = $request;
    }

    public function index(){
        //利用 get() 方法 测试是否注入成功
        //注意，我的服务器因为是 Nginx 所以做了URL 重写，
        //重写的时候 会把路径也作为GET变量传过来。所以打印值会多一个当前路径
        dump($this-&gt;request-&gt;get());

        //利用 post() 方法 测试是否注入成功
        echo &quot;&lt;hr&gt;&quot;;
        dump($this-&gt;request-&gt;post(['name'=&gt;'Cry']));

    }
}
</code></pre>
<p>2.操作方法注入<br>
不管有没有继承 BaseController 基类，都可以使用此方式</p>
<pre><code>&lt;?php
namespace app\index\controller;

use think\Request;

class Down
{

    public function index(Request $request){
        //利用 get() 方法 测试是否注入成功
        //注意，我的服务器因为是 Nginx 所以做了URL 重写，
        //重写的时候 会把路径也作为GET变量传过来。所以打印值会多一个当前路径
        dump($request-&gt;get());

        //利用 post() 方法 测试是否注入成功
        echo &quot;&lt;hr&gt;&quot;;
        dump($request-&gt;post(['name'=&gt;'Cry']));

    }
}
</code></pre>
<p>3.静态调用<br>
静态调用是利用TP6 的 facade 机制来静态请求的，use 的时候需要注意路径<br>
需要<strong>手动</strong> use  think\facade\Request;<br>
为什么需要注意？因为现阶段的 「编辑软件」 不会自动补全facade 的 use 路径  👻👻👻</p>
<pre><code>&lt;?php
namespace app\index\controller;

use \think\facade\Request;

class Down
{
    public function index(){
        //利用 get() 方法 测试是否注入成功
        //注意，我的服务器因为是 Nginx 所以做了URL 重写，
        //重写的时候 会把路径也作为GET变量传过来。所以打印值会多一个当前路径
        dump(Request::get());

        //利用 post() 方法 测试是否注入成功
        echo &quot;&lt;hr&gt;&quot;;
        dump(Request::post(['name'=&gt;'Cry']));
    }
}
</code></pre>
<p>4.助手函数<br>
TP6 一直为用户封装了很多助手函数，基本涵盖了常用的所有需求<br>
也就是说，TP6不辞辛苦的把每一个人的写法，都尽量兼容😂😂<br>
无需注入，无需继承 BaseController ，任何额外操作都不需要😂😂
<strong>但是官方就是不优先推荐</strong> 😂😂😂<br>
其实里面有的也是 facade</p>
<pre><code>&lt;?php
namespace app\index\controller;

class Down
{
    public function index(){
        //利用 get() 方法 测试是否注入成功
        //注意，我的服务器因为是 Nginx 所以做了URL 重写，
        //重写的时候 会把路径也作为GET变量传过来。所以打印值会多一个当前路径
        dump(request()-&gt;get());

        //利用 post() 方法 测试是否注入成功
        echo &quot;&lt;hr&gt;&quot;;
        dump(request()-&gt;post(['name'=&gt;'Cry']));
    }
}
</code></pre>
<h3 id="伪静态">伪静态</h3>
<p>默认支持 .html 作为后缀</p>
<blockquote>
<p>修改方式：app\config\route.php 文件下 'url_html_suffix'       =&gt; 'html' ，如果想关闭，改为 false ，如果不设置，则默认任何后缀都可访问。<br>
如果想支持多后缀 'url_html_suffix'       =&gt; 'html|xml'</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」控制器验证与响应]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-3</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-3">
        </link>
        <updated>2019-06-16T09:50:37.000Z</updated>
        <summary type="html"><![CDATA[<p>控制器验证<br>
响应</p>
]]></summary>
        <content type="html"><![CDATA[<p>控制器验证<br>
响应</p>
<!-- more -->
<h3 id="controller-基类继承引用">Controller 基类继承引用</h3>
<p>通过继承 BaseController 基类，注入 app 以及 request<br>
本文仅举两个浅显的调用例子<br>
1.获取当前操作名  $action = $this-&gt;request-&gt;action();<br>
2.获取当前应用基础目录  $path = $this-&gt;app-&gt;getBasePath();<br>
<img src="https://UserNameZjw.github.io/post-images/1560679805511.png" alt=""><br>
简易代码 ↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;

class Index extends BaseController
{
    public function index()
    {
        //获取当前操作名
        echo $action = $this-&gt;request-&gt;action();
        echo '&lt;br&gt;获取当前操作名代码 ：$action = $this-&gt;request-&gt;action();&lt;br&gt; ';
        // 获取当前应用基础目录
        echo $path = $this-&gt;app-&gt;getBasePath();
        echo '&lt;br&gt;获取当前应用基础目录 ：$path = $this-&gt;app-&gt;getBasePath();&lt;br&gt; ';
        echo &quot;以上两个调用 request app 均通过基类 BaseController.php 注入&lt;br&gt;&quot;;
        echo &quot;只需继承 BaseController 类即可调用&quot;;
    }
}
</code></pre>
<p>注意：<br>
如果你是多应用模式，可以在 应用目录下同样创建一个 BaseController.php 基类文件<br>
ThinkPHP 6 在寻址的时候，优先就近原则。</p>
<h3 id="控制器验证">控制器验证</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037629">TP6 官方内置规则</a><br>
1.通过引用 validate 函数直接在控制器中使用<br>
Validate(规则,返回提示)-&gt;check(数据)<br>
这个简单，就不做过多介绍</p>
<pre><code>&lt;?php
namespace app\index\controller;

class Validate
{ 
    public function index ()
    {
        //定义验证规则
        $rule = [
            'name' =&gt; &quot;require|max:10&quot;,
            'email' =&gt; &quot;email&quot;
        ];

        // 定义错误返回信息

        $message = [
            &quot;name&quot; =&gt; [&quot;require&quot; =&gt; '名称不能为空','max' =&gt; '名称最大长度为10'],
            'email' =&gt; '邮箱格式错误'
        ];

        // 定义模拟数据
        $data = [
            'name' =&gt; 'Cry',
            'email' =&gt; 'snail@qq.com'
        ];

        // 验证规则
        // Validate(规则,返回提示)-&gt;check(数据)
        $result = Validate($rule,$message)-&gt;check($data);

        if(!$result){
            // 获取报错数据
            return Validate()-&gt;getError();
        }else{
            return '验证通过';
        }
    }
}
</code></pre>
<p>2.通过引用 validate 对象直接在控制器中使用<br>
继承基类 BaseController 类<br>
$this-&gt;validate(数据,验证规则,返回提示);</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;

class Validate extends BaseController
{ 
    public function index ()
    {
        //定义验证规则
        $rule = [
            'name' =&gt; &quot;require|max:10&quot;,
            'email' =&gt; &quot;email&quot;
        ];

        // 定义错误返回信息

        $message = [
            &quot;name&quot; =&gt; [&quot;require&quot; =&gt; '名称不能为空','max' =&gt; '名称最大长度为10'],
            'email' =&gt; '邮箱格式错误'
        ];

        // 定义模拟数据
        $data = [
            'name' =&gt; 'Cry',
            'email' =&gt; 'snail@qq.com'
        ];

        // 验证规则
        $result = $this-&gt;validate($data,$rule,$message);

        if(!$result){
            // 获取报错数据
            return Validate()-&gt;getError();
        }else{
            return '验证通过';
        }
    }
}
</code></pre>
<p>3.自定义验证规则<br>
验证下图要求(均使用 ThinkPHP6 内置规则)<br>
<img src="https://UserNameZjw.github.io/post-images/1560694503550.png" alt=""><br>
1.需要额外创建一个验证文件</p>
<blockquote>
<p>在 app 目录下创建 validate 文件夹，然后创建 User.php 文件作为自定义规则文件。</p>
</blockquote>
<p>目录：app\validate\User .php 代码如下 ↓<br>
注意代码格式，不需要创建方法，直接写验证规则和验证返回即可<br>
用 protected 声明<br>
rule 验证变量，message 返回变量</p>
<pre><code>&lt;?php
namespace app\validate;

use think\Validate;

class User extends Validate
{
    protected $rule = [
        'user_name' =&gt; 'require|chsAlphaNum|length:6,10',
        'password' =&gt; 'require|alphaNum|length:6,10',
        'email' =&gt; 'email',
        'mobile' =&gt; 'require|mobile|number|length:11'
    ];

    protected $message = [
        'user_name' =&gt; ['require' =&gt; '用户名不能为空','chsAlphaNum' =&gt; '用户名必须为字母和数字或汉字','length' =&gt; '用户名长度应在6至10位'],
        'password' =&gt; ['require' =&gt; '密码不能为空','alphaNum' =&gt; '密码必须为数字和字母组合','length' =&gt; '密码长度应在6至10位'],
        'email' =&gt; ['email' =&gt; '邮箱格式有误'],
        'mobile' =&gt; ['require' =&gt; '手机不能为空','number' =&gt; '手机号必须为数字','length' =&gt; '手机号长度必须11位','mobile' =&gt; '不是可用手机号']
    ];
}
</code></pre>
<p>2.在 app\index\controller\Index.php 下调用<br>
引入 User.php ，具体代码如下 ↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

use app\BaseController;
use app\validate\User;

class Index extends BaseController
{
    public function index()
    {
        $data = [
            'user_name' =&gt; 'Cry666超帅的',
            'password' =&gt; '123456qwe',
            'email' =&gt; 'snail@qq.com',
            'mobile' =&gt; '13112121211'
        ];

        $result = Validate(User::class)-&gt;check($data);

        if(!$result){
            // 获取报错数据
            return Validate()-&gt;getError();
        }else{
            return '验证通过';
        }
    }
}
</code></pre>
<h3 id="响应">响应</h3>
<p>参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037526">TP6 官方响应输出</a><br>
除了路由，需要注意的可能就是重定向了</p>
<p>1.重定向<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037528">TP6 官方重定向</a><br>
只需要调用 redirect(URL) 助手函数 即可<br>
上一个官方例子代码，例子将直接跳转到TP 官网↓</p>
<pre><code>&lt;?php
namespace app\controller;

class Index
{
    public function hello()
    {
        return redirect('http://www.thinkphp.cn');
    }
}
</code></pre>
<p>个人例子
app/index/controller/Index.php 代码↓</p>
<pre><code>    public function dome($name = 'Cry')
    {
        return &quot;hello ,&quot;. $name .&quot;! 这是重定向后的 dome 页面&quot;;
    }

    public function name()
    {
//      直接无传值定向
//      return redirect(&quot;index/index/dome&quot;);
        return redirect(&quot;dome&quot;);
    }
</code></pre>
<p>打开后页面显示结果 ↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560930051407.png" alt=""></p>
<p>2.重定向传值</p>
<pre><code>    public function dome($name = 'Cry')
    {
        return &quot;hello ,&quot;. $name .&quot;! 这是重定向后的 dome 页面&quot;;
    }

    public function name()
    {
//        直接传值定向
//        1.直接在上拼接
//        return redirect(&quot;index/index/dome?name=Snail&quot;);
//        或者用 TP 分隔符 / 进行传值
//        return redirect(&quot;index/index/dome/name/Snail&quot;);

//        2.使用 params 助手函数配合
//        return redirect('dome')-&gt;params(['name'=&gt;'Snail']);

//        3.直接传递数组，推荐
        return redirect('dome',['name'=&gt;'Snail']);
    }
</code></pre>
<p>访问结果↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560930782212.png" alt=""><br>
注意：同命名空间下，可以省略详细路径！</p>
<p>3.重定向利用 session 闪存数据<br>
闪存、回源，需要借助 session 实现，TP6默认不开启 session<br>
开启方法：把 app/middlware.php 下的 session 初始化注释删除即可 ↓</p>
<pre><code>&lt;?php

return [
    // 全局请求缓存
    // 'think\middleware\CheckRequestCache',
    // 多语言加载
    // 'think\middleware\LoadLangPack',
    // Session初始化
     'think\middleware\SessionInit',
    // 页面Trace调试
    // 'think\middleware\TraceDebug',
];
</code></pre>
<p>闪存数据需要借助 with(变量名,变量值) 方法，写入到 session 缓存 代码如下 ↓</p>
<pre><code>    public function dome()
    {
        //利用session 助手函数 调用
        $name = session('name');
        return &quot;hello ,&quot;. $name .&quot;! 这是重定向后的 dome 页面&quot;;
    }

    public function name()
    {
        return redirect('dome')-&gt;with(&quot;name&quot;,&quot;Snail&quot;);
    }
</code></pre>
<blockquote>
<p>注意事项：重定向目标页面如果手动刷新，将会丢失session 传递值。</p>
</blockquote>
<p>图一：<img src="https://UserNameZjw.github.io/post-images/1560932232698.png" alt=""><br>
图二：<img src="https://UserNameZjw.github.io/post-images/1560932251677.png" alt=""></p>
<p>重定向回源利用 remember() 方法记住重定向来源页</p>
<pre><code>//重定向指向
    public function dome()
    {
        //利用session 助手函数 调用
        $name = session('name');
        return &quot;hello ,&quot;. $name .'! 这是重定向后的 dome 页面&lt;br&gt;&lt;a href=&quot;/index/index/back&quot;&gt;点击回到来源地址&lt;/a&gt;';
    }

    //访问链接
    public function name()
    {
        // 判断session完成标记是否存在
        // 主要是用于回源完成后执行
        if (session('?back')) {
            // 删除session
            session('back', null);
            return '重定向完成，回到原点!';
        } else {
            //利用 remember 方法记住当前地址。
            return redirect('dome')-&gt;with(&quot;name&quot;,&quot;Snail&quot;)-&gt;remember();
        }

    }

    //设置标记中转方法
    public function back(){
        //设置判断变量 back
        session('back',true);
        //回到原址
        return redirect()-&gt;restore();
    }
</code></pre>
<p>具体结果图 ↓<br>
图一：<img src="https://UserNameZjw.github.io/post-images/1560933916857.png" alt=""><br>
图二：<img src="https://UserNameZjw.github.io/post-images/1560933935189.png" alt=""><br>
图三：<img src="https://UserNameZjw.github.io/post-images/1560933943252.png" alt=""></p>
<blockquote>
<p>注意：图三所描述的场景，刷新重定向「目标页」，会丢的不仅仅数据，还有回家的路。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」部分配置与控制器]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-2</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-2">
        </link>
        <updated>2019-06-14T04:36:21.000Z</updated>
        <summary type="html"><![CDATA[<p>ThinkPHP 6.0 部分配置<br>
ThinkPHP 6.0 控制器</p>
]]></summary>
        <content type="html"><![CDATA[<p>ThinkPHP 6.0 部分配置<br>
ThinkPHP 6.0 控制器</p>
<!-- more -->
<blockquote>
<p>如果是 Nginx 服务器，并且版本不是太高，你需要看一下官方文档中的 Nginx 的路由转向配置，避免一下不必要的坑</p>
</blockquote>
<p>官网参考链接：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037488">TP6 URL访问</a><br>
找到 「Nginx」部分 图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560508162806.png" alt=""></p>
<pre><code>location / { // …..省略部分代码
   if (!-e $request_filename) {
   		rewrite  ^(.*)$  /index.php?s=/$1  last;
    }
}
</code></pre>
<p>如果你用的是跟我一样的 MxSrvs 软件，配置如下↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560508384596.png" alt=""><br>
然后重启 Nginx 服务器即可。</p>
<h3 id="变化">变化</h3>
<p>1.根目录文件名变化</p>
<blockquote>
<p>ThinkPHP 5 版本(图左)是 application 文件夹，ThinkPHP 6 版本(图右)直接命名就是 app 文件夹。
<img src="https://UserNameZjw.github.io/post-images/1560509598577.png" alt=""></p>
</blockquote>
<p>2.默认用模式</p>
<blockquote>
<p>ThinkPHP 6 默认是单应用模式，TP5 版本默认是多应用模式。<br>
TP6 的多应用模式需要手动开启支持。<br>
开启方法修改 config/app.php 配置文件中配置为  'auto_multi_app'   =&gt; true 即可。<br>
单例模式中，在控制器空间命名中，可以省略掉应用名 index （举例）。<br>
命名空间<br>
TP5 写法  <strong>namespace app\index\controller;</strong><br>
TP6 写法  <strong>namespace app\controller;</strong>   (单应用模式)<br>
文件位置<br>
TP5 文件位置 <strong>application/index/controller/Index.php</strong><br>
TP6 文件位置 <strong>app/controller/Index.php</strong><br>
多应用开启后，就需要跟TP5一样的写法</p>
</blockquote>
<p>注意：如果开启多应用模式，需要删除掉框架默认自带的 controller 文件夹，不然会依然每次访问，都默认到 controller 。</p>
<p>3.控制器命名规范变化</p>
<blockquote>
<p>TP 5 中需要控制器文件名必须采用驼峰命名（首字母大写: Index）。<br>
TP6 中兼容了普通写法，文件名完全小写: index ，只需要你的类名跟文件名保持一致即可<br>
假设 文件名为 index.php ，那么类的写法为 class index{ } 。</p>
</blockquote>
<p>4.支持控制器大驼峰命名  (两者都默认支持)</p>
<blockquote>
<p>举例：<br>
控制器文件名为 HelloWorld.php ，类名保持一致为 class HelloWorld { }<br>
文件路径 app\index\controller\HelloWorld.php<br>
访问地址 http://localhost/index.php/hello_world<br>
现支持 http://localhost/index.php/HelloWorld  访问
此功能默认开启，如果想关闭，需要修改 route.php 配置文件中配置为 url_convert'   =&gt; false  即可。</p>
</blockquote>
<p>5.控制器文件名默认省略 controller  后缀</p>
<blockquote>
<p>TP3.x 版本，就是不省略 controller 后缀，开启可以用作兼容低版本文件来用。<br>
默认控制器文件名格式 Index.php，开启后，需要把控制器文件名格式变更为 IndexController.php<br>
开启方法，修改 route.php 配置文件中配置为 'controller_suffix'     =&gt; true</p>
</blockquote>
<p>6.错误信息</p>
<blockquote>
<p>TP6 中默认没有开启错误信息<br>
只需要修改 config/app.php 配置文件中配置为 'show_error_msg'   =&gt; true 即可显示错误信息，默认关闭。</p>
</blockquote>
<p>7.开启开发调试模式<br>
参考资料：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037618">TP6 官方调试模式</a><br>
<img src="https://UserNameZjw.github.io/post-images/1560782224176.png" alt=""><br>
注意：是文件名 .example..env 把 .env 之前的全部删掉，仅仅保留 .env 。<br>
然后报错图如下↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560782376130.png" alt=""></p>
<h3 id="配置小结">配置小结</h3>
<p>本小结仅限本文出现，当然还有其他好的配置。<br>
1.开启多应用模式</p>
<blockquote>
<p>修改 config/app.php 配置文件中配置为  'auto_multi_app'   =&gt; true</p>
</blockquote>
<p>2.关闭控制器大驼峰命名访问支持</p>
<blockquote>
<p>修改 route.php 配置文件中配置为 url_convert'   =&gt; false</p>
</blockquote>
<p>3.开启错误信息</p>
<blockquote>
<p>修改 config/app.php 配置文件中配置为 'show_error_msg'   =&gt; true</p>
</blockquote>
<p>4.开启控制器严格模式，即文件名不省略 Controller</p>
<blockquote>
<p>修改 route.php 配置文件中配置为 'controller_suffix'     =&gt; true</p>
</blockquote>
<p>5.开启开发调试模式</p>
<blockquote>
<p>只需要把根目录下 .example..env 文件更名为 <strong>.env</strong> 即可。</p>
</blockquote>
<h3 id="配置操作">配置操作</h3>
<p>官方文档：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037484">ThinkPHP 6 官方配置</a><br>
1.配置获取<br>
操作配置，需要引入 Config 类文件</p>
<pre><code>use think\facade\Config;
</code></pre>
<p>2.读取配置  Config::get()</p>
<p>读取一级配置所有参数</p>
<pre><code>Config::get('app');
Config::get('route');
</code></pre>
<p>读取单个配置</p>
<pre><code>Config::get('app.app_name');
Config::get('route.url_domain_root');
</code></pre>
<p>读取数组配置</p>
<pre><code>Config::get('database.default.host');
</code></pre>
<p>3.判断是否存在某个配置  Config::has()</p>
<pre><code>Config::has('template');
Config::has('route.route_rule_merge');
</code></pre>
<p>4.修改配置  Config::set()<br>
不在支持单个配置更新，需要数组批量更新配置</p>
<pre><code>&lt;?php
namespace app\index\controller;
use think\facade\Config;
class Index
{
    public function index()
    {
        //原为true 
        Config::set([&quot;show_error_msg&quot; =&gt; false],'app');
        $a = Config::get(&quot;app&quot;);
        var_dump($a);
    }
}
</code></pre>
<h3 id="控制器">控制器</h3>
<p>1.经典型控制器(多应用模式)</p>
<pre><code>&lt;?php
namespace app\index\controller;

class Index
{
    public function index()
    {
        return 'index';
    }
}
</code></pre>
<p>文件位置：app\index\controller\Index.php<br>
访问URL：http://localhost/index.php/index</p>
<p>2.多级控制器(理论支持无限级)<br>
注意多级控制的命名空间写法</p>
<pre><code>&lt;?php
namespace app\index\controller\user;

class  Blog 
{
    public function index()
    {
        return 'index';
    }
    
}
</code></pre>
<p>文件位置：app/index/controller/user/Blog.php<br>
访问URL：http://localhost/index.php/user.blog/index<br>
注意事项如下↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560519428516.png" alt=""></p>
<p>3.引用其他模块类 需要 use 命名空间</p>
<pre><code>&lt;?php
namespace app\index\controller;
use think\facade\Config;
use app\index\controller\user\Blog;

class Index
{
    public function index()
    {
        $bolg = new Blog();
        return $bolg -&gt;index();
        // return request()-&gt;controller();
    }
}
</code></pre>
<p>4.控制类继承 extends<br>
use 一下需要继承的类文件<br>
然后直接继承便可以调用类方法</p>
<pre><code>&lt;?php
namespace app\index\controller;
use think\facade\Config;

class Index extends Config
{
    public function index()
    {
        var_dump(Config::get('app'));
        // return request()-&gt;controller();
    }
}
</code></pre>
<p>5.空控制器<br>
空控制器的使用场景是，当访问到一个不存在的方法时自动调用，可以作为当前控制下的404错误URL优化使用。</p>
<pre><code>&lt;?php
namespace app\index\controller;

class Index
{
    public function __call($method, $args)
    {
        return '调用当前空控制器方法！';
    }

    public function index()
    {
        return 'index';
    }
}
</code></pre>
<p>当我访问不存在的 hello 方法时↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560522078557.png" alt=""></p>
<h3 id="渲染输出">渲染输出</h3>
<p>控制器一般不需要任何输出，直接 return 即可<br>
不要在控制器中使用 die、exit 等类似的中断代码，需要调试，可以使用内置 halt 助手函数。<br>
部分系统有效输出↓</p>
<pre><code>&lt;?php
namespace app\index\controller;

class Index 
{
    public function hello()
    {
    	// 输出hello,world!
        return 'hello,world!';
    }
    
    public function json()
    {
    	// 输出JSON
        return json($data);
    }
    
    public function read()
    {
    	// 渲染默认模板输出
        return view();
    }

}
</code></pre>
<h3 id="路由">路由</h3>
<p>多级控制器官方推荐访问方法为 自定义配置路由<br>
下节再聊🤣🤣🤣</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【失误】Mac 上关于链接本地MySQL数据库的报错2002]]></title>
        <id>https://UserNameZjw.github.io/post/Mac-error</id>
        <link href="https://UserNameZjw.github.io/post/Mac-error">
        </link>
        <updated>2019-06-11T15:10:54.000Z</updated>
        <summary type="html"><![CDATA[<p>以此为戒<br>
绝不再犯<br>
再犯...我也不能咋地自己不是  😂😂😂</p>
]]></summary>
        <content type="html"><![CDATA[<p>以此为戒<br>
绝不再犯<br>
再犯...我也不能咋地自己不是  😂😂😂</p>
<!-- more -->
<h3 id="解决-mac-连接-mysql-本地数据库出现-2002-错误">解决 Mac 连接 MySQL 本地数据库出现 2002 错误</h3>
<p>仅仅就一个注意事项，除了第一次配置 Mac 环境的时候坑了我一把，终于在我没把它当回事的时候，又出来坑了我一个小时，本次，提醒自己。<br>
重要事情说三遍</p>
<blockquote>
<p>Mac 链接本地数据库的时候，必须用 127.0.0.1 而不能用 localhost<br>
Mac 链接本地数据库的时候，必须用 127.0.0.1 而不能用 localhost<br>
Mac 链接本地数据库的时候，必须用 127.0.0.1 而不能用 localhost</p>
</blockquote>
<p>我指的是在 config 的连接文件中的访问 指向
不然会报错...错...错！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[「ThinkPHP 6.0」下载与安装]]></title>
        <id>https://UserNameZjw.github.io/post/thinkphp-6-1</id>
        <link href="https://UserNameZjw.github.io/post/thinkphp-6-1">
        </link>
        <updated>2019-06-11T03:12:04.000Z</updated>
        <summary type="html"><![CDATA[<p>本文仅介绍如何安装TP6<br>
仅记录本人的实际经过<br>
如有后来者，不保证经验完全可以照搬</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文仅介绍如何安装TP6<br>
仅记录本人的实际经过<br>
如有后来者，不保证经验完全可以照搬</p>
<!-- more -->
<p>闲话不多说，直接进入主题</p>
<h3 id="资料及参考">资料及参考</h3>
<p>官方文档：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037479">TP6官方文档「预览版」</a><br>
本文主要参考官方文档<br>
第一章[安装]：<a href="https://www.kancloud.cn/manual/thinkphp6_0/1037481">第一章链接</a><br>
安装工具 composer ，关于composer 不多做介绍<br>
composer 官网(国外) ：<a href="https://getcomposer.org/">composer 官网链接</a><br>
composer 中国镜像官网：<a href="https://www.phpcomposer.com/">composer 中国镜像官网链接</a></p>
<blockquote>
<p>为什么需要中国镜像官网，是因为「中国国情」导致无法访问到国外站点，除非借助梯子<br>
其实TP6的文档非常详细了，包括关于 composer 的安装、替换镜像源、下载软件都有详细步骤讲解。</p>
</blockquote>
<h3 id="实际上手">实际上手</h3>
<p>虽然官方的说明非常详细，但也根据每个人的电脑环境，以及系统版本等不同因素而受到不同的影响，以下记录本人的上手情况</p>
<h3 id="上手环境">上手环境!</h3>
<p>电脑配置图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560225219378.png" alt="电脑环境"><br>
PHP、Mysql、Nginx 集成环境软件：<a href="http://www.xsrvs.com/">MxSrvs 官网</a><br>
官网截图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560225646600.png" alt=""><br>
一款很OK的环境集成工具，简单，满足需求。<br>
缺点：对我来说，唯一的不足就是下载实在是太慢。不过如果有梯子，可以通过谷歌云下载，速度还是OK得，我就是本方式下载</p>
<h3 id="安装-composer">安装 composer</h3>
<p>这里我是之前就有安装过，所以直接使用就行了。<br>
可以直接对照着TP6文档一步一步操作。</p>
<h3 id="安装tp6">安装TP6</h3>
<p>我在这个安装过程中，耗费了将近半个小时的时间，总结了一下原因</p>
<ol>
<li>镜像源替换失败</li>
<li>人品(后面介绍)</li>
</ol>
<p>环境需求：</p>
<blockquote>
<p>安装TP6 需要 PHP 版本 &gt;= 7.1.0 。</p>
</blockquote>
<p>安装步骤(仅介绍Mac)</p>
<ol>
<li>打开终端工具，顺带检查一下 composer 。
在终端键入 composer 然后回车<br>
会出现下图 ↓  即代表安装正确并且全局可使用 composer<br>
<img src="https://UserNameZjw.github.io/post-images/1560226968175.png" alt=""></li>
<li>安装开发版(因为现在还没有正式版😁😁)<br>
先找到要安装的文件夹目录，键入 cd 然后文件目录路径，回车。<br>
我安装的是 /Users/zjw/Documents/web 目录下<br>
小技巧，如果在Mac 上不知道路径，只要把你的文件夹拖进终端就可。</li>
</ol>
<pre><code>cd /Users/zjw/Documents/web 
</code></pre>
<p>然后复制TP6文档中的开发版安装代码，回车，就会自动安装了。代码位置下图↓
<img src="https://UserNameZjw.github.io/post-images/1560227622056.png" alt=""><br>
代码 ：</p>
<pre><code>composer create-project topthink/think=6.0.x-dev tp
</code></pre>
<p>注意事项：最后的 「tp」 代表你要创建的用来安装TP6 的文件夹名，这个是可以随便更改的，例如我的是要放在 tp6 文件夹下的，所以 只需要把最后的 「tp」改为「tp6」即可。<br>
由于每个人的网络情况的不同，下载时间也不同，我加上网络以及人品，折腾了半个多小时。<br>
安装完之后的截图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560228060858.jpg" alt=""></p>
<p>至此，安装完成。<br>
当然这是正常流程。<br>
下面来说下我的人品问题。
为什么归结于人品呢，有人会问，成功就是成功，失败就是失败，肯定是有原因的。<br>
可是，我说一个现象，如有雷同，请告诉我，吾道不孤。<br>
正题：<br>
一切代码，严格按照教程流程来的。刻意把 web 目录下原本创建的 tp6 文件夹删除。<br>
然而，我竟然有两次跑完代码，显示创建以及下载成功的时候，却仅仅在 web 目录下创建了一个空的 tp6 文件夹，没有任何东西，最后一次的成功，死马当作活马医，删除了一下 composer 的缓存文件，漫长的等待之后，我终于如愿以偿的看到了下图↓<br>
<img src="https://UserNameZjw.github.io/post-images/1560228518737.jpg" alt=""><br>
看到上图的操作方法，以我的本地环境为例<br>
也可以参考官网文档里的方法<br>
先把本地环境 PHP 版本更换为合适的版本，MxSrvs 提供了 7.2.6 版本，变更后会自动重启。<br>
<img src="https://UserNameZjw.github.io/post-images/1560229809105.png" alt=""><br>
接下来把 Nginx 的配置文件 更改一下。<br>
<img src="https://UserNameZjw.github.io/post-images/1560229920582.png" alt=""><br>
具体更改位置下图 ↓
<img src="https://UserNameZjw.github.io/post-images/1560230041802.png" alt=""><br>
在这两个地方增加上你的目录即可，然后重启一下你的 Nginx 服务器！<br>
打开浏览器输入 127.0.0.1 或者 localhost 就可以看到 TP 特有的欢迎页了<br>
TP 都是以 public 文件夹下的 index 为单一入口的，只需要把路径精确到 public 就可以了。</p>
<p>感谢互联网的开放精神，拯救了我。<br>
其实，具体是不是缓存的问题，还是网络的问题，我真的深究不来，既然成功了，那就当成缓存问题来处理好了。💀💀💀</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【重学PHP】序言]]></title>
        <id>https://UserNameZjw.github.io/post/chong-xue-php</id>
        <link href="https://UserNameZjw.github.io/post/chong-xue-php">
        </link>
        <updated>2019-06-10T11:30:58.000Z</updated>
        <summary type="html"><![CDATA[<p>这个世界，最公平的就是「你付出多少努力，生活就回报你多少收获」<br>
希望未来的自己，感谢现在努力的自己<br>
谨以此记录</p>
]]></summary>
        <content type="html"><![CDATA[<p>这个世界，最公平的就是「你付出多少努力，生活就回报你多少收获」<br>
希望未来的自己，感谢现在努力的自己<br>
谨以此记录</p>
<!-- more -->
<p>本篇写在即在一个小时后迎来第一次直播课的前夕，花费7880，报名参与一个PhpEr进阶班。这应该是除了大学，我所为学习花费最大的一笔单项支出，希望我能有更多的收获，或者说，有让自己满意的收获。<br>
其实，做这个决定，真的是为了弥补我这几年为了这安逸的工作环境而不愿激励自己学习新知识后果，希望其他人以此为戒。</p>
<h3 id="背景">背景</h3>
<ol>
<li>图安逸，不思进取</li>
<li>发现与社会必须技能脱节</li>
<li>真真的被生活压力所迫</li>
<li>不想让未来的自己鄙视现在的自己</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://UserNameZjw.github.io/post/hello-gridea</id>
        <link href="https://UserNameZjw.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>